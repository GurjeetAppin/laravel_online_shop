Youtube Channel name :- php tech life
Admin Details :- username :- admin@admin.com password :- 12345
User Details :- adam@user.com password :- 1234567890
Login Functionality :- Changes in the core files.
1 :- config >> auth.php
            'guards' => [
                'web' => [
                    'driver' => 'session',
                    'provider' => 'users',
                ],
                // Admin guards Created 14-06-2024
                'admin' => [
                    'driver' => 'session',
                    'provider' => 'admin',
                ],
            ],

            'providers' => [
                'users' => [
                    'driver' => 'eloquent',
                    'model' => env('AUTH_MODEL', App\Models\User::class),
                ],

                // Admin guards Created 14-06-2024

                'admin' => [
                    'driver' => 'eloquent',
                    'model' => env('AUTH_MODEL', App\Models\User::class),
                ],

                // 'users' => [
                //     'driver' => 'database',
                //     'table' => 'users',
                // ],
            ],

@extends('folder_file_name) :- This function is used to call the parent layout inside the child layout.
@yield('section_name') :- This function called the child layout inside the parent layout.

view > admin > layouts >> app.blade.php
    Set the default laravel csrf token
    1 :- <meta name="csrf-token" content="{{ csrf_token() }}">
    2 :- <script>
			$.ajaxSetup({
				header:{
					'X-CSRF-TOKEN' : $('meta[name="csrf-token"]').attr('content')
				}
			});
		</script>
To set the pagination design :-
Goto the AppServiceProvider.php file :-
        public function boot(): void
        {
            // Use this for set design of pagination
            Paginator::useBootstrapFive();
        }
Part 6 Image Upload :- create.blade.php
    link the file of public >> dropzone >> min >> 
    <!-- image Upload -->
		<script src="{{asset('admin-assets/plugins/dropzone/min/dropzone.min.js')}}"></script>
    <!-- Image Upload --> 
		<link rel="stylesheet" href="{{asset('admin-assets/plugins/dropzone/min/dropzone.min.css')}}">
	1 :- php artisan make:model TempImage
    2 :- php artisan make:migration create_temp_images_table

    <div class="col-md-6">
        <div class="mb-3">
            <label for="image">Image</label>
            <div id="image" class="dropzone dz-clickable">
                <div class="dz-message needsclick">
                    <br>Drop files here or click to upload</br></br>
                </div>
            </div>
        </div>
    </div>	

    Dropzone.autoDiscover = false; // Render the dropzone
    const dropzone = $('#image').dropzone({
        init : function(){
            this.on('addedfile', function(file){
                if(this.file.length > 1){
                    this.removeFile(this.files[0]);
                } // This is used to select the single file at a time.
            });
        },
        url : "{{route('temp-images.create')}}",
        maxFiles : 1, // Upload single file.
        paramName : 'image', // Create input type name image
        addRemoveLinks : true, // Create remove links in image dropzone section
        acceptedFiles : 'image/jpge,image/png,image/gif',
        headers : {
            'X-CSRF-TOKEN' : $('meta[name="csrf-token"]').attr('content')
        },success: function(file, response){
            $('#image_id').val(response.image_id);
            console.log(response);
        }
    });

//  Save the image as a thumbnail using the 'intervention/image' extension
    This libaray is generate the image thumbnail according to width and height.
    Command :-  1.  composer require intervention/image
                2.  composer require intervention/image-laravel
                3.  Next, add the configuration files to your application using the vendor:publish command:
                    php artisan vendor:publish --provider="Intervention\Image\Laravel\ServiceProvider"

Part 7 :- Categories Edit, Delete.
            CategoryController.php
            public function edit(Request $request, $id){
        $categories = Category::find($id);
        $tempImage = new TempImage;
        if(empty($categories)){
            return redirect()->route('category.index');
        }
        return view('admin.category.edit',['categories' => $categories]);
    }

    public function update(Request $request, $id){
        $category = Category::find($id);
        if(empty($category)){
            $request->session()->flash('error', 'Category not found.');
            return response()->json([
                'status' => false,
                'notFound' => true,
                'message' => 'Category not found'
            ]);
        }
        $validator = Validator::make($request->all(),[
            'name' => 'required',
            'slug' => 'required | unique:categories,slug,'.$category->id.',id',
        ]);
        if($validator->passes()){
            $category->name = $request->name;
            $category->slug = $request->slug;
            $category->status = $request->status;
            $category->save();
            $request->session()->flash('success', 'Category Update Successfully.');
            return response()->json([
                'status' => true,
                'message' => 'Category Update Successfully'
            ]);
        }else{
            return response()->json([
                'status' => false,
                'errors' => $validator->errors()
            ]);
        }

        

    }

    public function destroy(Request $request, $id){
        $category = Category::find($id);
        if(empty($category)){
            //return redirect()->route('category.index');
            $request->session()->flash('error','Category not found');
            return response()->json([
                'status' => true,
                'message' => 'Category not found'
            ]);
        }
       /*  File::delete(public_path().'/uploads/category/thumb/'.$category->image);
        File::delete(public_path().'/uploads/category/'.$category->image); */
        $category->delete();
        $request->session()->flash('success','Category Deleted Successfully');
        return response()->json([
            'status' => true,
            'message' => 'Category Deleted Succssefully'
        ]);
    }

    view > admin > category > edit.php
            @extends('admin.layouts.app')

@section('content')
<!-- Content Header (Page header) -->
<section class="content-header">					
    <div class="container-fluid my-2">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>Edit Category</h1>
            </div>
            <div class="col-sm-6 text-right">
                <a href="{{route('category.index')}}" class="btn btn-primary">Back</a>
            </div>
        </div>
    </div>
    <!-- /.container-fluid -->
</section>
<!-- Main content -->
<section class="content">
    <!-- Default box -->
    <div class="container-fluid">
        <form action="" method="post" id="categoryForm" name="categoryForm">
            <!-- @csrf -->
            
        <div class="card">
            <div class="card-body">								
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="name">Name</label>
                            <input type="text" name="name" id="name" class="form-control" value="{{$categories->name}}" placeholder="Name">	
                            <p></p>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="slug">Slug</label>
                            <input type="text" name="slug" id="slug" class="form-control" value="{{$categories->slug}}"placeholder="Slug" readonly>	
                            <p></p>
                        </div>
                    </div>	
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="image">Image</label>
                            <div id="image" class="dropzone dz-clickable">
                                <div class="dz-message needsclick">
                                    <br>Drop files here or click to upload</br></br>
                                </div>
                            </div>
                        </div>
                        <div>
                           <!--  @if(!empty($categories->image))
                            <img src="{{asset('uploads/category/thumb/'.$categories->image)}}" alt="" srcset="">
                            @endif -->
                        </div>
                    </div>	
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="status">Status</label>
                            <select name="status" id="status" class="form-control">
                                    <option value="1" {{($categories->status == 1) ? 'selected' : ''}}>Active</option>
                                    <option value="2" {{($categories->status == 2) ? 'selected' : ''}}>Block</option>
                            </select>
                        </div>
                    </div>							
                </div>
            </div>							
        </div>
        <div class="pb-5 pt-3">
            <button class="btn btn-primary" type="submit">Update</button>
            <a href="{{route('category.index')}}" class="btn btn-outline-dark ml-3">Cancel</a>
        </div>
        </form>
    </div>
    <!-- /.card -->
</section>
<!-- /.content -->
@endsection

@section('customJs')
    <script>
        $('#categoryForm').submit(function(event){
            event.preventDefault();
            var element = $(this);
             // For disabled after the submit buttton
            $("button[type=submit]").prop('disabled',true);
            $.ajax({
                url : '{{ route("categories.update",$categories->id) }}',
                type : 'put',
                data : element.serializeArray(),
                dataType : 'json',
                success: function(response){
                    // For disabled after the submit buttton
                    $("button[type=submit]").prop('disabled',false);
                    if(response['status'] == true){
                        window.location.href="{{route('category.index')}}";
                        $('#name').removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html("");
                        $('#slug').removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html(""); 
                    }else{
                        if(response['notFound'] == true){
                            window.location.href="{{route('category.index')}}";
                        }
                        var errors = response['errors'];
                        if(errors['name']){
                            $('#name').addClass('is-invalid').siblings('p').addClass('invalid-feedback').html(errors['name']);
                        }else{
                            $('#name').removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html("");
                        }
                        if(errors['slug']){
                            $('#slug').addClass('is-invalid').siblings('p').addClass('invalid-feedback').html(errors['slug']);
                        }else{
                            $('#slug').removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html("");
                        }
                    }
                },
                error: function(jqXHR, exception){
                    console.log("Something went wrong");
                }

            });
        });
    $("#name").change(function(event){
        event.preventDefault();
        element = $(this);
         // For disabled after the submit buttton
         $("button[type=submit]").prop('disabled',true);
        $.ajax({
                url : '{{ route("getSlug") }}',
                type : 'get',
                data : {title: element.val()},
                dataType : 'json',
                success: function(response){
                    // For disabled after the submit buttton
                    $("button[type=submit]").prop('disabled',false);        
                    if(response['status'] == true){
                        $('#slug').val(response['slug']);
                    }
                },
                errors : function(jqXHR, exception){
                    console.log("Slug is not found");
                }
        });
    });


    Dropzone.autoDiscover = false; // Render the dropzone
    const dropzone = $('#image').dropzone({
        init : function(){
            this.on('addedfile', function(file){
                if(this.files.length > 1){
                    this.removeFile(this.files[0]);
                } // This is used to select the single file at a time.
            });
        },
        url : "{{route('temp-images.create')}}",
        maxFiles : 1, // Upload single file.
        paramName : 'image', // Create input type name image
        addRemoveLinks : true, // Create remove links in image dropzone section
        acceptedFiles : 'image/jpge,image/png,image/gif',
        headers : {
            'X-CSRF-TOKEN' : $('meta[name="csrf-token"').attr('content')
        },success: function(file, response){
            $('#image_id').val(response.image_id);
            console.log(response);
        }
    });
        
    </script>
@endsection


    view > category > list.php
        <a href="#" onclick="deleteCategory({{$category->id}})" class="text-danger w-4 h-4 mr-1">
            <svg wire:loading.remove.delay="" wire:target="" class="filament-link-icon w-4 h-4 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path	ath fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path>
            </svg>
        </a>

        web.php

        Route::get('categories/{id}/edit',[CategoryController::class,'edit'])->name('categories.edit');
        Route::put('categories/{id}',[CategoryController::class,'update'])->name('categories.update');
        Route::delete('categories/{id}',[CategoryController::class,'destroy'])->name('categories.delete');


Part :- 8 Sub Categories create and list in Admin.
        SubCategoryController.php
        namespace App\Http\Controllers\admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use App\Models\Category;
use App\Models\SubCategory;

class SubCategoryController extends Controller
{
    //

    public function create(){
        $category = Category::orderBy('name', 'ASC')->get();
        $data['categories'] = $category;
        return view('admin.sub_category.create',$data);
    }

    public function index(Request $request){
        $subCategories = SubCategory::select('sub_categories.*','categories.name as categoryName')->latest('id')->leftJoin('categories','categories.id','sub_categories.category_id');
        if(!empty($request->get('keyword'))){
            $subCategories = $subCategories->where('sub_categories.name','like','%'.$request->get('keyword').'%');
            $subCategories = $subCategories->orWhere('categories.name','like','%'.$request->get('keyword').'%');
        }
        $subCategories = $subCategories->paginate(10);
        return view('admin.sub_category.list',['subCategories' => $subCategories]);
    }

    public function store(Request $request){
        $validator = Validator::make($request->all(),[
            'name' => 'required',
            'slug' => 'required | unique:sub_categories',
            'status' => 'required',
            'category' => 'required'
        ]);

        if($validator->passes()){
            $subCategories = new SubCategory;
            $subCategories->name = $request->name;
            $subCategories->slug = $request->slug;
            $subCategories->status = $request->status;
            $subCategories->category_id = $request->category;
            $subCategories->save();
            $request->session()->flash('success', 'Sub Category created successfully.');
            return response()->json([
                'status' => true,
                'message' => 'Sub Category created successfull,'
            ]);
        }else{
            return response()->json([
                'status' => false,
                'errors' => $validator->errors()
            ]);
        }

    }

    public function edit(Request $request, $id){
        $editSubCategory= SubCategory::find($id);
        
        if(empty($editSubCategory)){
            $request->session()->flash('error', 'Sub Category not found');
            return redirect()->route('sub-categories.index');
        }
        $category = Category::orderBy('name','ASC',)->get();
        $data['categories'] = $category;
        $data['editSubCategory'] = $editSubCategory;
        
        return view('admin.sub_category.edit', $data);
    }

    public function update(Request $request, $id){
        $subCategories = SubCategory::find($id);
        if(empty($subCategories)){
           $request->session()->flash('message','Records not Found');
           return response()->json([
                'status' => false,
                'notFound' => true
           ]);
            //return redirect()->route('sub-categories.index');
        }
        $validator = Validator::make($request->all(),[
                'name' => 'required',
                'slug' => 'required | unique:sub_categories,slug,'.$subCategories->id.'id',
                'status' => 'required',
                'category' => 'required'
            ]);
           

        if($validator->passes()){
            $subCategories->name = $request->name;
            $subCategories->slug = $request->slug;
            $subCategories->status = $request->status;
            $subCategories->category_id = $request->category;
            $subCategories->save();
            $request->session()->flash('success','Sub Category Updated Successfully');
            return response()->json([
                'status' => true,
                'message' => 'Sub Category Updated Successfully'
            ]);
        }else{
            return response()->json([
                'status' => false,
                'errors' => $validator->errors(),
                'message' => 'Something went wrong'
            ]);
        }
        
    }


    public function destroy(Request $request, $id){
        $subCategories = SubCategory::find($id);
        if(empty($subCategories)){
            $request->session()->flash('message','Record not found');
            return response()->json([
                'status' => false,
                'notFound' => true
            ]);
        }
        $subCategories->delete();
        $request->session()->flash('success','Sub Category Deleted successfully.');
        return response()->json([
            'status' => true,
            'message' => 'Sub Category Deleted successfully.'
        ]);
    }
}

    view > sub_categories > all pages here.

    web.php

    // Sub Category Route
    Route::get('sub-categories/create',[SubCategoryController::class,'create'])->name('sub-categories.create');
    Route::post('sub-categories',[SubCategoryController::class,'store'])->name('sub-categories.store');
    Route::get('sub-categories',[SubCategoryController::class,'index'])->name('sub-categories.index');
    Route::get('sub-categories/{id}/edit',[SubCategoryController::class,'edit'])->name('sub-categories.edit');
    Route::put('sub-categories/{id}',[SubCategoryController::class,'update'])->name('sub-categories.update');
    Route::delete('sub-categories/{id}',[SubCategoryController::class,'destroy'])->name('sub-categories.delete');


Part :- 10 Brands
        1. php artisan make:migration create_brands_table
        2. Goto migration > Brands file.
            $table->id();
            $table->string('name');
            $table->slug('slug');
            $table->integer('status');
            $table->timestamps();
        3. php artisan make:controller Admin\BrandController
            namespace App\Http\Controllers\Admin;
            use App\Http\Controllers\Controller;
            use App\Models\Brand;
            use Illuminate\Http\Request;
            use Illuminate\Support\Facades\Validator;

            class BrandController extends Controller
            {

                public function index(Request $request){
                    $brands = Brand::latest();
                    if($request->get('keyword')){
                        $brands = $brands->where('name', 'like', '%'.$request->keyword.'%');
                    }
                    $brands = $brands->paginate(10);
                    return view('admin.brands.list',['listBrands' => $brands]);
                }

                public function create(){
                    return view('admin.brands.create');
                }

                public function store(Request $request){
                
                    $validator = Validator::make($request->all(),[
                        'name' => 'required',
                        'slug' => 'required | unique:brands'
                    ]);  
                    if($validator->passes()){
                        $brand = new Brand;
                        $brand->name = $request->name;
                        $brand->slug = $request->slug;
                        $brand->status = $request->status;
                        $brand->save();
                        $request->session()->flash('success', 'Brand Created Successfully');
                        
                        return response()->json([
                            'status' => true,
                            'message' => "Brand Created Successfully"
                        ]);
                    }else{
                        return response()->json([
                            'status' => false,
                            'errors' => $validator->errors()
                        ]);
                    }
                }

                public function edit(Request $request, $id){
                    $brand = Brand::find($id);
                    if(empty($brand)){
                        $request->session()->flash('error', 'Record not found.');
                        return redirect()->route('brands.index');
                    }

                    return view('admin.brands.edit', ['brand' => $brand]);
                }

                public function update(Request $request, $id){

                    $brand = Brand::find($id);
                    if(empty($brand)){
                        $request->session()->flash('error', 'Record not found.');
                        return response()->json([
                            'status' => false,
                            'notFound' => true,
                            'message' => 'Brand not found'
                        ]);
                    }

                    $validator = Validator::make($request->all(),[
                        'name' => 'required',
                        'slug' => 'required | unique:brands,slug,'.$brand->id.',id',
                    ]);  
                    if($validator->passes()){
                        $brand->name = $request->name;
                        $brand->slug = $request->slug;
                        $brand->status = $request->status;
                        $brand->save();
                        $request->session()->flash('success', 'Brand Updated Successfully');
                        
                        return response()->json([
                            'status' => true,
                            'message' => "Brand Updated Successfully"
                        ]);
                    }else{
                        return response()->json([
                            'status' => false,
                            'errors' => $validator->errors()
                        ]);
                    }
                }

                public function destroy(Request $request, $id){
                    $brand = Brand::find($id);
                    if(empty($brand)){
                        $request->session()->flash('error', 'Brand not Found');
                        return response()->json([
                            'status' => 'true',
                            'message' => 'Brand not Found'
                        ]);
                    }

                    $brand->delete();
                    $request->session()->flash('success', 'Brand deleted Successfully.');
                    return response()->json([
                        'status' => true,
                        'message' => 'Brand deleted Successfully.'
                    ]);
                }


            }
        4.  php artisan make:model Brand
        5.  php artisan make:view admin/brands/create, and edit, list :- Check the view/admin/brands folder
        6.  web.php
            Route::get('brands',[BrandController::class,'index'])->name('brands.index');
            Route::get('brands/create', [BrandController::class, 'create'])->name('brands.create');
            Route::post('brands',[BrandController::class,'store'])->name('brands.store');
            Route::get('brands/{id}/edit', [BrandController::class, 'edit'])->name('brands.edit');
            Route::put('brands/{id}',[BrandController::class,'update'])->name('brands.update');
            Route::delete('brands/{id}',[BrandController::class,'destroy'])->name('brands.delete');


Part :- 11 Setup Product tables
        1.   php artisan make:migration create_products_table :- For save products
            migrations folder > product_table.php
             public function up(): void
                {
                    Schema::create('products', function (Blueprint $table) {
                        $table->id();
                        $table->string('title');
                        $table->string('slug');
                        $table->string('description')->nullable();
                        $table->double('price', 10,2);
                        $table->double('compare_price', 10,2)->nullable();
                        $table->foreignId('category_id')->constrained()->onDelete('cascade');
                        $table->foreignId('sub_category_id')->nullable()->constrained()->onDelete('cascade');
                        $table->foreignId('brand_id')->nullable()->constrained()->onDelete('cascade');
                        $table->enum('is_featured', ['Yes', 'No'])->default('No');
                        $table->string('sku');
                        $table->string('barcode')->nullable();
                        $table->enum('track_qty', ['Yes', 'No'])->default('Yes');
                        $table->integer('qty')->nullable();
                        $table->integer('status')->default(1);            
                        $table->timestamps();
                    });
                }
        2.  php artisan make:migration create_images_table :- For save images
            migrations folder > images_table.php
            public function up(): void
            {
                Schema::create('images', function (Blueprint $table) {
                    $table->id();
                    $table->foreignId('product_id')->constrained()->onDelete('cascade');
                    $table->string('image');
                    $table->integer('sort_order')->nullable();
                    $table->timestamps();
                });
            }


Part :- 12 Create products  
        1. php artisan make:controller Admin/ProductController
        2. php artisan make:model Product
        3. php artisan make:model ProductImage
        4. php artisan make:controller Admin/ProductSubCategoryController

Part :- 13 Add product in database
        Web.php
        Route::get('products', [ProductController::class,'index'])->name('product.index');
        Route::get('products/create', [ProductController::class, 'create'])->name('products.create');
        Route::post('products',[ProductController::class,'store'])->name('products.store');
        // Get Products SubCategories
        Route::get('product-subcategories', [ProductSubCategoryController::class,'index'])->name('product-subcategories.index');
   
        1. Create folder in View > admin > product
        2. Create file create.php
            @extends('admin.layouts.app')
@section('breadcrumb-item')
    Products
@endsection
@section('list')
    Create
@endsection
@section('content')
    <!-- Content Header (Page header) -->
<section class="content-header">					
    <div class="container-fluid my-2">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>Create Product</h1>
            </div>
            <div class="col-sm-6 text-right">
                <a href="" class="btn btn-primary">Back</a>
            </div>
        </div>
    </div>
    <!-- /.container-fluid -->
</section>
<!-- Main content -->
<section class="content">
    <!-- Default box -->
     <form action="{{route('products.store')}}" name="productForm" id="productForm" method="post">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-8">
                    <div class="card mb-3">
                        <div class="card-body">								
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="mb-3">
                                        <label for="title">Title</label>
                                        <input type="text" name="title" id="title" class="form-control" placeholder="Title">	
                                        <p class="error"></p>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="mb-3">
                                        <label for="slug">Slug</label>
                                        <input type="text" name="slug" id="slug" class="form-control" placeholder="Slug" readonly>	
                                        <p class="error"></p>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="mb-3">
                                        <label for="description">Description</label>
                                        <textarea name="description" id="description" cols="30" rows="10" class="summernote" placeholder="Description"></textarea>
                                    </div>
                                </div>                                            
                            </div>
                        </div>	                                                                      
                    </div>
                    <div class="card mb-3">
                        <div class="card-body">
                            <h2 class="h4 mb-3">Media</h2>								
                            <div id="image" class="dropzone dz-clickable">
                                <div class="dz-message needsclick">    
                                    <br>Drop files here or click to upload.<br><br>                                            
                                </div>
                            </div>
                        </div>	                                                                      
                    </div>
                    <div class="row" id="product-gallery">

                    </div>
                    <div class="card mb-3">
                        <div class="card-body">
                            <h2 class="h4 mb-3">Pricing</h2>								
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="mb-3">
                                        <label for="price">Price</label>
                                        <input type="text" name="price" id="price" class="form-control" placeholder="Price">
                                        <p class="error"></p>	
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="mb-3">
                                        <label for="compare_price">Compare at Price</label>
                                        <input type="text" name="compare_price" id="compare_price" class="form-control" placeholder="Compare Price">
                                        <p class="text-muted mt-3">
                                            To show a reduced price, move the product’s original price into Compare at price. Enter a lower value into Price.
                                        </p>	
                                    </div>
                                </div>                                            
                            </div>
                        </div>	                                                                      
                    </div>
                    <div class="card mb-3">
                        <div class="card-body">
                            <h2 class="h4 mb-3">Inventory</h2>								
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="sku">SKU (Stock Keeping Unit)</label>
                                        <input type="text" name="sku" id="sku" class="form-control" placeholder="sku">	
                                        <p class="error"></p>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="barcode">Barcode</label>
                                        <input type="text" name="barcode" id="barcode" class="form-control" placeholder="Barcode">	
                                    </div>
                                </div>   
                                <div class="col-md-12">
                                    <div class="mb-3">
                                        <div class="custom-control custom-checkbox">
                                            <!-- Hidden field is used when we uncheck then field is not created inside the validation so this situation is handle with hidden field because when we unchecked then hidden field value is created or if we checked the field the checkbox value is created -->
                                            <input type="hidden" name="track_qty" value="No">
                                            <input class="custom-control-input" type="checkbox" id="track_qty" name="track_qty" value="Yes" checked>
                                            <label for="track_qty" class="custom-control-label">Track Quantity</label>
                                            <p class="error"></p>
                                        </div>
                                    </div>
                                    <div class="mb-3">
                                        <input type="number" min="0" name="qty" id="qty" class="form-control" placeholder="Qty">	
                                        <p class="error"></p>
                                    </div>
                                </div>                                         
                            </div>
                        </div>	                                                                      
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card mb-3">
                        <div class="card-body">	
                            <h2 class="h4 mb-3">Product status</h2>
                            <div class="mb-3">
                                <select name="status" id="status" class="form-control">
                                    <option value="1">Active</option>
                                    <option value="0">Block</option>
                                </select>
                            </div>
                        </div>
                    </div> 
                    <div class="card">
                        <div class="card-body">	
                            <h2 class="h4  mb-3">Product category</h2>
                            <div class="mb-3">
                                <label for="category">Category</label>
                                <select name="category" id="category" class="form-control">
                                    <option value="">Select a Category</option>
                                    @if($categories->isNotEmpty())
                                        @foreach($categories as $category)
                                            <option value="{{$category->id}}">{{$category->name}}</option>
                                        @endforeach
                                    @endif                                    
                                </select>
                                <p class="error"></p>
                            </div>
                            <div class="mb-3">
                                <label for="category">Sub category</label>
                                <select name="sub_category" id="sub_category" class="form-control">
                                    <option value="">Select a Subcategory</option>
                                    
                                </select>
                            </div>
                        </div>
                    </div> 
                    <div class="card mb-3">
                        <div class="card-body">	
                            <h2 class="h4 mb-3">Product brand</h2>
                            <div class="mb-3">
                                <select name="brand" id="brand" class="form-control">
                                    <option value="">Select a brand</option>
                                    @if($brands->isNotEmpty())
                                        @foreach($brands as $brand)
                                            <option value="{{$brand->id}}">{{$brand->name}}</option>
                                        @endforeach
                                    @endif
                                </select>
                            </div>
                        </div>
                    </div> 
                    <div class="card mb-3">
                        <div class="card-body">	
                            <h2 class="h4 mb-3">Featured product</h2>
                            <div class="mb-3">
                                <select name="is_featured" id="is_featured" class="form-control">
                                    <option value="No">No</option>
                                    <option value="Yes">Yes</option>                                                
                                </select>
                                <p class="error"></p>
                            </div>
                        </div>
                    </div>                                 
                </div>
            </div>
            <div class="pb-5 pt-3">
                <button type="submit" class="btn btn-primary">Create</button>
                <a href="" class="btn btn-outline-dark ml-3">Cancel</a>
            </div>
        </div>
    </form>
    <!-- /.card -->
</section>
<!-- /.content -->

@endsection
@section('customJs')
<script>
    
    // Slug
    $("#title").on('change', function(){
        let element = $(this);
        $('button[type=submit]').prop('disabled', true);
        $.ajax({
            url : '{{route("getSlug")}}',
            type : 'get',
            data : {title : element.val()},
            dataType : 'json',
            success : function(response){
                //console.log('response ==', response);
                $('button[type=submit]').prop('disabled', false);
                if(response['status'] == true){
                    $('#slug').val(response['slug']);
                }
            }
        });
    });

    // Store Products
    $("#productForm").submit(function(event){
        event.preventDefault(); // Stop the actual submittion of form
        let formArray = $(this).serializeArray();
        $('button[type="submit"]').prop('disabled', true);
        $.ajax({
            url : '{{route("products.store")}}',
            type : 'post',
            data : formArray,
            dataType : 'json',
            success : function(response){
                $('button[type="submit"]').prop('disabled', false);
                if(response['status'] == true){
                    $('.error').removeClass('invalid-feedback').html('');
                    $("input[type='text'], select, input[type='number']").removeClass('is-invalid');
                    window.location.href = "{{route('products.index')}}";
                }else{
                    let errors = response['errors'];
                    /* if(errors['title']){
                        $('#title').addClass('is-invalid').siblings('p').addClass('invalid-feedback').html(errors['title']);
                    }else{
                        $('#title').removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html('');
                    } */
                   $('.error').removeClass('invalid-feedback').html('');
                   $("input[type='text'], select, input[type='number']").removeClass('is-invalid');
                    $.each(errors, function(key, value){
                        $(`#${key}`).addClass('is-invalid').siblings('p').addClass('invalid-feedback').html(value);
                    });
                }
            },
            error : function(){
                console.log("Something went wrong.");
            }

        });
    });

    $('#category').on('change', function(event){
        event.preventDefault();
        let category_id = $(this).val();
        $.ajax({
            url : '{{route("product-subcategories.index")}}',
            type : 'get',
            data : { category_id: category_id},
            dataType : 'json',
            success : function(response){
                //console.log(response);
                $('#sub_category').find('option').not(':first').remove(); // Not remove the first option.
                $.each(response['subCategories'], function(key, item){
                    $('#sub_category').append(`<option value='${item.id}'>${item.name}</option>`)
                });
            },
            error : function(){
                console.log("Categories not found");
                
            }
        });
    });

    Dropzone.autoDiscover = false; // Render the dropzone
        const dropzone = $('#image').dropzone({
        url : "{{route('temp-images.create')}}",
        maxFiles : 10, // Upload single file.
        paramName : 'image', // Create input type name image
        addRemoveLinks : true, // Create remove links in image dropzone section
        acceptedFiles : 'image/jpge,image/png,image/gif',
        headers : {
            'X-CSRF-TOKEN' : $('meta[name="csrf-token"').attr('content')
        },success: function(file, response){
            //$('#image_id').val(response.image_id);
            //console.log(response);
            let html = `<div class="col-md-3" id="image-row-${response.image_id}"><div class="card">
                    <input type="hidden" name="image_array[]" id="" value="${response.image_id}">
                    <img src="${response.imagePath}" class="card-img-top" alt="Gallery image" >
                    <div class="card-body">
                       <a href="javascript:void(0)" onclick="deleteImage(${response.image_id})" class="btn btn-danger">Delete</a>
                    </div>
                </div></div>`;
            $('#product-gallery').append(html);
        },
        complete: function(file){
            this.removeFile(file);
        }
    });

    function deleteImage(id){
        $('#image-row-'+id).remove();
    }
</script>
@endsection

    3. ProductController.php
    <?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Brand;
use App\Models\Category;
use App\Models\Product;
use App\Models\ProductImage;
use App\Models\TempImage;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Image;

class ProductController extends Controller
{

    public function index(){
        return view('admin.products.index');
    }
    
    public function create(Request $request){
        $data = [];
        $categories = Category::orderBy('name', 'ASC')->get();
        $brands = Brand::orderBy('name', 'ASC')->get();
        $data['categories'] = $categories;
        $data['brands'] = $brands;
        return view('admin.products.create', $data);   
    }

    

    public function store(Request $request){
        $rules = [
                    'title' => 'required',
                    'slug' => 'required|unique:products',
                    'price' => 'required|numeric',
                    'sku' => 'required|unique:products',
                    'track_qty' => 'required|in:Yes,No',
                    'category' => 'required|numeric',
                    'is_featured' => 'required|in:Yes,No'
                ];

        if(!empty($request->track_qty) && $request->track_qty == 'Yes'){
            $rules['qty'] =  'required|numeric';
        }
        $validator = Validator::make($request->all(), $rules);
        if($validator->passes()){
            $product = new Product;
            $product->title = $request->title;
            $product->slug = $request->slug;
            $product->description = $request->description;
            $product->price = $request->price;
            $product->compare_price = $request->compare_price;
            $product->sku = $request->sku;
            $product->barcode = $request->barcode;
            $product->track_qty = $request->track_qty;
            $product->qty = $request->qty;
            $product->status = $request->status;
            $product->category_id = $request->category;
            $product->sub_category_id = $request->sub_category;
            $product->brand_id = $request->brand;
            $product->is_featured = $request->is_featured;
            //dd($product);
            $product->save();

            // Store Gallery Images
            if(!empty($request->image_array)){
                foreach($request->image_array as $temp_image_id){

                    // Get data from data base
                    $tempImageInfo = TempImage::find($temp_image_id);
                    $extArr = explode('.', $tempImageInfo->name);
                    $ext = last($extArr); // Get extension like jpg,png, gif etc.

                    // Save Image in Product Image table
                    $productImage = new ProductImage();
                    $productImage->product_id = $product->id;
                    $productImage->image = 'Null';
                    $productImage->save();

                    // Unique Image name
                    $imageName = $product->id.'-'.$productImage->id.'-'.time().'.'.$ext;
                    $productImage->image = $imageName;
                    $productImage->save();

                    // Generate Product Thumbnails
                    
                    // Large Image
                    $sourcePath = public_path().'/temp/'.$tempImageInfo->name;
                    $destPath = public_path().'/uploads/products/large/'.$tempImageInfo->name;
                    $image = Image::make($sourcePath);
                    $image->resize(1400, null, function($constrant){
                        $constrant->aspectRatio();
                    });
                    $image->save($destPath);
                
                    // Small Image
                    $destSmallPath = public_path().'/uploads/products/small/'.$tempImageInfo->name;
                    $image = Image::make($sourcePath);
                    $image->fit(300, 300);
                    $image->save($destSmallPath);
                }
            }

            session()->flash('success', 'Product added successfull');
            return response()->json([
                'status' => true,
                'message' => 'Product added successfully'
            ]);
        }else{
            return response()->json([
                'status' => false,
                'errors' => $validator->errors()
            ]);
        }
    }
}
        product_table.php
         public function up(): void
    {
        Schema::create('products', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->string('slug');
            $table->string('description')->nullable();
            $table->double('price', 10,2);
            $table->double('compare_price', 10,2)->nullable();
            $table->foreignId('category_id')->constrained()->onDelete('cascade');
            $table->foreignId('sub_category_id')->nullable()->constrained()->onDelete('cascade');
            $table->foreignId('brand_id')->nullable()->constrained()->onDelete('cascade');
            $table->enum('is_featured', ['Yes', 'No'])->default('No');
            $table->string('sku');
            $table->string('barcode')->nullable();
            $table->enum('track_qty', ['Yes', 'No'])->default('Yes');
            $table->integer('qty')->nullable();
            $table->integer('status')->default(1);            
            $table->timestamps();
        });

        migration prouct_images_table.php
        public function up(): void
    {
        Schema::create('product_images', function (Blueprint $table) {
            $table->id();
            $table->foreignId('product_id')->constrained()->onDelete('cascade');
            $table->string('image');
            $table->integer('sort_order')->nullable();
            $table->timestamps();
        });
    }

    Model > product, product_images, files.


Part :- 14 Product List Admin
    ProductController.php
    public function index(Request $request){
        //$data['products'] = Product::latest('id')->with('product_images')->paginate();
        $products = Product::latest('id')->with('product_images');
        //dd($product);
        if($request->get('keyword') != ''){
            $products = $products->whereAny(['title','price','sku'],'like','%'.$request->keyword.'%');
        }
        $products = $products->paginate();
        return view('admin.products.list', ['products' => $products]);
    }

    view > admin > product > list.blade.php

    Product.php // Model
    // Relation and get the images form ProductImage table.
    public function product_images(){
        return $this->hasMany(ProductImage::class);
    }


Part :- 15 Edit Product in Admin
        ProductController.php

        public function edit(Request $response, $id){
            $data = [];
            $product = Product::find($id);
            if(empty($product)){
                return redirect()->route('products.index')->with('error', 'Product not found');
            }
            // fetch Product image
            $productImages = ProductImage::where('product_id', $product->id)->get();  
            $data['product'] = $product;
            $subCategory = SubCategory::where('category_id', $product->category_id)->get();
            $data['subCategory'] = $subCategory;
            $categories = Category::orderBy('name', 'ASC')->get();
            $brands = Brand::orderBy('name', 'ASC')->get();
            $data['categories'] = $categories;
            $data['brands'] = $brands;
            $data['productImages'] = $productImages;
            return view('admin.products.edit', $data);
        }
        
        public function update(Request $request, $id){
        $product = Product::find($id);
        $rules = [
            'title' => 'required',
            'slug' => 'required|unique:products,slug,'.$product->id.'id',
            'price' => 'required|numeric',
            'sku' => 'required|unique:products,sku,'.$product->id.'id',
            'track_qty' => 'required|in:Yes,No',
            'category' => 'required|numeric',
            'is_featured' => 'required|in:Yes,No'
        ];
        if(!empty($request->track_qty) && $request->track_qty == 'Yes'){
            $rules['qty'] =  'required|numeric';
        }
        $validator = Validator::make($request->all(), $rules);
        if($validator->passes()){
            $product->title = $request->title;
            $product->slug = $request->slug;
            $product->description = $request->description;
            $product->price = $request->price;
            $product->compare_price = $request->compare_price;
            $product->sku = $request->sku;
            $product->barcode = $request->barcode;
            $product->track_qty = $request->track_qty;
            $product->qty = $request->qty;
            $product->status = $request->status;
            $product->category_id = $request->category;
            $product->sub_category_id = $request->sub_category;
            $product->brand_id = $request->brand;
            $product->is_featured = $request->is_featured;
            //dd($product);
            $product->save();

            session()->flash('success', 'Product Update successfull');
            return response()->json([
                'status' => true,
                'productData' => $product,
                'message' => 'Product Update successfully'
            ]);
        }else{
            return response()->json([
                'status' => false,
                'errors' => $validator->errors()
            ]);
        }
    }

    ProductImageController.php
    public function update(Request $request){
        // Upload Images
        $manager = new ImageManager(new Driver());
        $image = $request->image;
        $ext = $image->getClientOriginalExtension();
        $sourcePath = $image->getPathName();

        // Save Image in Product Image table
        $productImage = new ProductImage();
        $productImage->product_id = $request->product_id;
        $productImage->image = 'Null';
        $productImage->save();

        // Unique Image name
        $imageName = $request->product_id.'-'.$productImage->id.'-'.time().'.'.$ext;
        $productImage->image = $imageName;
        $productImage->save();

        // Generate Product Thumbnails
                    
        // Large Image
        $destPath = public_path().'/uploads/products/large/'.$imageName;
        $image = $manager->read($sourcePath);
        $image->scale(1400, null, function($constrant){
            $constrant->aspectRatio();
        });
        $image->save($destPath);
    
        // Small Image
        $destSmallPath = public_path().'/uploads/products/small/'.$imageName;
        $image = $manager->read($sourcePath);
        $image->scale(300, 300);
        $image->save($destSmallPath);

        return response()->json([
            'status' => true,
            'image_id' => $productImage->id,
            'imagePath' => asset('uploads/products/small/'.$productImage->image),
            'message' => 'Image saved successfully.'
        ]);
    }

    public function destroy(Request $request){
        $productImage = ProductImage::find($request->id);
        if(empty($productImage)){
            return response()->json([
                'status' => false,
                'message' => 'Image not found'
            ]);
        }
        // Delete Images from Folder
        File::delete(public_path('uploads/products/large/'.$productImage->image));
        File::delete(public_path('uploads/products/small/'.$productImage->image));

        // Delete Image form database
        $productImage->delete();
        return response()->json([
            'status' => true,
            'message' => 'Image Deleted successfully.'
        ]);
    }

    view > admin > products > edit.blade.php

    @extends('admin.layouts.app')
@section('breadcrumb-item')
    Products
@endsection
@section('list')
    Create
@endsection
@section('content')
    <!-- Content Header (Page header) -->
<section class="content-header">					
    <div class="container-fluid my-2">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>Create Product</h1>
            </div>
            <div class="col-sm-6 text-right">
                <a href="{{route('products.index')}}" class="btn btn-primary">Back</a>
            </div>
        </div>
    </div>
    <!-- /.container-fluid -->
</section>
<!-- Main content -->
<section class="content">
    <!-- Default box -->
     <form action="" name="productUpdate" id="productUpdate" method="put">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-8">
                    <div class="card mb-3">
                        <div class="card-body">								
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="mb-3">
                                        <label for="title">Title</label>
                                        <input type="text" name="title" id="title" class="form-control" placeholder="Title" value="{{ $product->title }}">	
                                        <p class="error"></p>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="mb-3">
                                        <label for="slug">Slug</label>
                                        <input type="text" name="slug" id="slug" class="form-control" value="{{ $product->slug }}" placeholder="Slug" readonly>	
                                        <p class="error"></p>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="mb-3">
                                        <label for="description">Description</label>
                                        <textarea name="description" id="description" cols="30" rows="10" class="summernote" placeholder="Description">{{ $product->description }}</textarea>
                                    </div>
                                </div>                                            
                            </div>
                        </div>	                                                                      
                    </div>
                    <div class="card mb-3">
                        <div class="card-body">
                            <h2 class="h4 mb-3">Media</h2>								
                            <div id="image" class="dropzone dz-clickable">
                                <div class="dz-message needsclick">    
                                    <br>Drop files here or click to upload.<br><br>                                            
                                </div>
                            </div>
                        </div>	                                                                      
                    </div>
                    <div class="row" id="product-gallery">
                        @if(!empty($productImages))
                            @foreach($productImages as $image)
                            <div class="col-md-3" id="image-row-{{$image->id}}">
                                <div class="card">
                                    <input type="hidden" name="image_array[]" id="" value="{{$image->id}}">
                                    <img src="{{ asset('uploads/products/small/'.$image->image) }}" class="card-img-top" alt="Gallery image" >
                                    <div class="card-body">
                                    <a href="javascript:void(0)" onclick='deleteImage("{{$image->id}}")' class="btn btn-danger">Delete</a>
                                    </div>
                                </div>
                            </div>
                            @endforeach
                        @endif
                    </div>
                    <div class="card mb-3">
                        <div class="card-body">
                            <h2 class="h4 mb-3">Pricing</h2>								
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="mb-3">
                                        <label for="price">Price</label>
                                        <input type="text" name="price" id="price" class="form-control" value="{{ $product->price }}" placeholder="Price">
                                        <p class="error"></p>	
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="mb-3">
                                        <label for="compare_price">Compare at Price</label>
                                        <input type="text" name="compare_price" id="compare_price" class="form-control" value="{{ $product->compare_price }}" placeholder="Compare Price">
                                        <p class="text-muted mt-3">
                                            To show a reduced price, move the product’s original price into Compare at price. Enter a lower value into Price.
                                        </p>	
                                    </div>
                                </div>                                            
                            </div>
                        </div>	                                                                      
                    </div>
                    <div class="card mb-3">
                        <div class="card-body">
                            <h2 class="h4 mb-3">Inventory</h2>								
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="sku">SKU (Stock Keeping Unit)</label>
                                        <input type="text" name="sku" id="sku" class="form-control" value="{{ $product->sku }}" placeholder="sku">	
                                        <p class="error"></p>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="barcode">Barcode</label>
                                        <input type="text" name="barcode" id="barcode" class="form-control" value="{{ $product->barcode }}" placeholder="Barcode">	
                                    </div>
                                </div>   
                                <div class="col-md-12">
                                    <div class="mb-3">
                                        <div class="custom-control custom-checkbox">
                                            <!-- Hidden field is used when we uncheck then field is not created inside the validation so this situation is handle with hidden field because when we unchecked then hidden field value is created or if we checked the field the checkbox value is created -->
                                            <input type="hidden" name="track_qty" value="No">
                                            <input class="custom-control-input" type="checkbox" id="track_qty" name="track_qty" value="Yes" {{ ($product->track_qty == 'Yes') ? 'checked' : '' }}>
                                            <label for="track_qty" class="custom-control-label">Track Quantity</label>
                                            <p class="error"></p>
                                        </div>
                                    </div>
                                    <div class="mb-3">
                                        <input type="number" min="0" name="qty" id="qty" class="form-control" value="{{ $product->qty }}" placeholder="Qty">	
                                        <p class="error"></p>
                                    </div>
                                </div>                                         
                            </div>
                        </div>	                                                                      
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card mb-3">
                        <div class="card-body">	
                            <h2 class="h4 mb-3">Product status</h2>
                            <div class="mb-3">
                                <select name="status" id="status" class="form-control">
                                    <option <?php if(!empty($product->status) && $product->status == '1') { echo 'selected'; }else { echo ''; }  ?> value="1">Active</option>
                                    <option <?php if(!empty($product->status) && $product->status == '0') { echo 'selected'; }else { echo ''; }  ?> value="0">Block</option>
                                </select>
                            </div>
                        </div>
                    </div> 
                    <div class="card">
                        <div class="card-body">	
                            <h2 class="h4  mb-3">Product category</h2>
                            <div class="mb-3">
                                <label for="category">Category</label>
                                <select name="category" id="category" class="form-control">
                                    <option value="">Select a Category</option>
                                    @if($categories->isNotEmpty())
                                        @foreach($categories as $category)
                                            <option  <?php if( $product->category_id == $category->id) { echo 'selected'; }else { echo ''; }  ?> value="{{$category->id}}">{{$category->name}}</option>
                                        @endforeach
                                    @endif                                    
                                </select>
                                <p class="error"></p>
                            </div>
                            <div class="mb-3">
                                <label for="category">Sub category</label>
                                <select name="sub_category" id="sub_category" class="form-control">
                                    @if($subCategory->isNotEmpty())
                                        @foreach($subCategory as $subCate)
                                            <option {{ ($product->sub_category_id == $subCate->id) ? 'selected' : '' }} value="{{ $subCate->id }}">{{$subCate->name}}</option>
                                        @endforeach
                                    @endif
                                </select>
                            </div>
                        </div>
                    </div> 
                    <div class="card mb-3">
                        <div class="card-body">	
                            <h2 class="h4 mb-3">Product brand</h2>
                            <div class="mb-3">
                                <select name="brand" id="brand" class="form-control">
                                    @if($brands->isNotEmpty())
                                        @foreach($brands as $brand)
                                            <option {{ ($product->brand == $brand->id) ? 'selected' : ''}} value="{{$brand->id}}">{{$brand->name}}</option>
                                        @endforeach
                                    @endif
                                </select>
                            </div>
                        </div>
                    </div> 
                    <div class="card mb-3">
                        <div class="card-body">	
                            <h2 class="h4 mb-3">Featured product</h2>
                            <div class="mb-3">
                                <select name="is_featured" id="is_featured" class="form-control">
                                    <option <?php if(!empty($product->is_featured) && $product->is_featured == 'No') { echo 'selected'; }else { echo ''; }  ?> value="No">No</option>
                                    <option <?php if(!empty($product->is_featured) && $product->is_featured == 'Yes') { echo 'selected'; }else { echo ''; }  ?> value="Yes">Yes</option>                                                
                                </select>
                                <p class="error"></p>
                            </div>
                        </div>
                    </div>                                 
                </div>
            </div>
            <div class="pb-5 pt-3">
                <button type="submit" class="btn btn-primary">Update</button>
                <a href="{{route('products.index')}}" class="btn btn-outline-dark ml-3">Cancel</a>
            </div>
        </div>
    </form>
    <!-- /.card -->
</section>
<!-- /.content -->

@endsection
@section('customJs')
<script>
    
    // Slug
    $("#title").on('change', function(){
        let element = $(this);
        $('button[type=submit]').prop('disabled', true);
        $.ajax({
            url : '{{route("getSlug")}}',
            type : 'get',
            data : {title : element.val()},
            dataType : 'json',
            success : function(response){
                //console.log('response ==', response);
                $('button[type=submit]').prop('disabled', false);
                if(response['status'] == true){
                    $('#slug').val(response['slug']);
                }
            }
        });
    });

    // Update Products
    $("#productUpdate").submit(function(event){
        event.preventDefault(); // Stop the actual submittion of form
        let formArray = $(this).serializeArray();
        $('button[type="submit"]').prop('disabled', true);
        $.ajax({
            url : '{{route("products.update", $product->id)}}',
            type : 'put',
            data : formArray,
            dataType : 'json',
            success : function(response){
                $('button[type="submit"]').prop('disabled', false);
                if(response['status'] == true){
                    $('.error').removeClass('invalid-feedback').html('');
                    $("input[type='text'], select, input[type='number']").removeClass('is-invalid');
                    window.location.href = "{{route('products.index')}}";
                }else{
                    let errors = response['errors'];
                    /* if(errors['title']){
                        $('#title').addClass('is-invalid').siblings('p').addClass('invalid-feedback').html(errors['title']);
                    }else{
                        $('#title').removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html('');
                    } */
                   $('.error').removeClass('invalid-feedback').html('');
                   $("input[type='text'], select, input[type='number']").removeClass('is-invalid');
                    $.each(errors, function(key, value){
                        $(`#${key}`).addClass('is-invalid').siblings('p').addClass('invalid-feedback').html(value);
                    });
                }
            },
            error : function(){
                console.log("Something went wrong.");
            }

        });
    });

    $('#category').on('change', function(event){
        event.preventDefault();
        let category_id = $(this).val();
        $.ajax({
            url : '{{route("product-subcategories.index")}}',
            type : 'get',
            data : { category_id: category_id},
            dataType : 'json',
            success : function(response){
                //console.log(response);
                $('#sub_category').find('option').not(':first').remove(); // Not remove the first option.
                $.each(response['subCategories'], function(key, item){
                    $('#sub_category').append(`<option value='${item.id}'>${item.name}</option>`)
                });
            },
            error : function(){
                console.log("Categories not found");
                
            }
        });
    });

    Dropzone.autoDiscover = false; // Render the dropzone
        const dropzone = $('#image').dropzone({
        url : "{{route('products-images.update')}}",                
        maxFiles : 10, // Upload single file.
        paramName : 'image', // Create input type name image
        params:{'product_id' : '{{$product->id}}'},    
        addRemoveLinks : true, // Create remove links in image dropzone section
        acceptedFiles : 'image/jpge,image/png,image/gif',
        headers : {
            'X-CSRF-TOKEN' : $('meta[name="csrf-token"]').attr('content')
        },success: function(file, response){
            //$('#image_id').val(response.image_id);
            //console.log(response);
            let html = `<div class="col-md-3" id="image-row-${response.image_id}"><div class="card">
                    <input type="hidden" name="image_array[]" id="" value="${response.image_id}">
                    <img src="${response.imagePath}" class="card-img-top" alt="Gallery image" >
                    <div class="card-body">
                       <a href="javascript:void(0)" onclick="deleteImage(${response.image_id})" class="btn btn-danger">Delete</a>
                    </div>
                </div></div>`;
            $('#product-gallery').append(html);
        },
        complete: function(file){
            this.removeFile(file);
        }
    });

    function deleteImage(id){
       $('#image-row-'+id).remove();
        if(confirm("Are you sure you want to delete image?")){
            $.ajax({
                url: '{{route("products-image-destroy")}}',
                type: 'delete',
                data: {id: id},
                success: function(response){
                    if(response.status == true){
                        alert(response.message);
                    }else{
                        alert(response.message);
                    }
                }
            });
        }
    }
</script>
@endsection


Part :- 16 Product delete in Admin panel.
        ProductController.php
         public function destroy(Request $request, $id){
        $product = Product::find($id);
        if(empty($product)){
            session()->flash('error', 'Product not found');
            return response()->json([
                'status' => false,
                'notFound' => true
            ]);
        }
        $productImages = ProductImage::where('product_id',$id)->get();
        if(!empty($productImages)){
            foreach($productImages as $productImage){
                File::delete(public_path('uploads/products/large/'.$productImage->image));
                File::delete(public_path('uploads/products/small/'.$productImage->image));
            }
            ProductImage::where('product_id', $id)->delete();
        }
        $product->delete();
        session()->flash('success', 'Product deleted successfully');
        return response()->json([
            'status' => true,
            'message' => 'Product Deleted successfully'
        ]);
    }

    web.php

    // Delete Product
        Route::delete('products/{id}', [ProductController::class, 'destroy'])->name('products.delete');

    view > products > list.blade.php
    <a href="#" class="text-danger w-4 h-4 mr-1" onclick="deleteProduct('{{$product->id}}')">

    <script>
    function deleteProduct(id){
       /*  alert(id);
        return false; */
        let url = '{{ route("products.delete", "id") }}';
        let newUrl = url.replace('id', id);
        /* alert(url);
        return false; */
        if(confirm("Are you sure you want to delete product.")){
            $.ajax({
                url : newUrl,
                type : 'delete',
                data : {},
                dataType : 'json',
                headers : {
                    'X-CSRF-TOKEN' : $('meta[name="csrf-token"]').attr('content')
                },
                success : function(response){
                    if(response['status'] == true){
                        //console.log(response);
                        window.location.href = '{{route("products.index")}}';               
                    }else{
                        window.location.href = '{{route("products.index")}}';
                    }
                },
                error : function(jqXHR, exception){
                    console.log('Something went wrong');
                    
                }

            });
        }
    }
</script>

<----------------- Frontend ----------------->
Part :- 17 Setup Home page.
1. Download the frontend template and copy the css,js,images, fonts folder and paste inside the public folder.

2. Make FrontController
3. Create  file inside the view > front > home.blade.php
4. Create a layout inside the front folder.

Part :- 18 Dynamic home page.
    1.  Add the field in admin > categores. view > admin > category > create 
        <div class="col-md-6">
            <div class="mb-3">
                <label for="showHome">Show on Home</label>
                <select name="showHome" id="showHome" class="form-control">
                    <option value="1">Yes</option>
                    <option value="2">no</option>
                </select>
            </div>
        </div>	
    2. add column in category table :- php artisan make:migration alter_categories_table
    database > migration > migration  file
    
    public function up(): void
    {
        Schema::table('categories', function(Blueprint $table){
            $table->enum('showHome', ['Yes', 'No'])->after('status')->default('No');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('categories', function(Blueprint $table){
            $table->dropColumn('showHome');
        });
    }

    3. php artisan migrate
    4. Change the datatype of description column in products table.
        4.1 first we install the package. With help of this package we change the datatype of columns.
            Package name :- doctrine/dbal
                            composer require doctrine/dbal
        4.2 php artisan make:migration alter_products_table
        database > mig > alter_products_table.php
            public function up(): void
            {
                Schema::table('products', function(Blueprint $table){
                    $table->text('description')->change();
                });
            }

            /**
            * Reverse the migrations.
            */
            public function down(): void
            {
                Schema::table('products', function(Blueprint $table){
                    $table->string('description')->change();
                });
            }

        5.  Create a helpers folder inside the app folder
            5.1 :-  Goto the composer.json file and set the helper path in autoload.
                    "files": [
                                "app/Helpers/helper.php"
                            ]
                    "autoload": {
                        "psr-4": {
                            "App\\": "app/",
                            "Database\\Factories\\": "database/factories/",
                            "Database\\Seeders\\": "database/seeders/"
                        },
                        "files": [
                            "app/Helpers/helper.php"
                        ]
                    },
            5.2 :-  Run the this command after this command we use the helpers and registerd helper.
                    composer dump-autoload
                    helper.php
                    function getCategories(){
                        return  Category::orderBy('name', 'ASC')
                                ->with('sub_category')
                                ->orderBy('id', 'DESC')
                                ->where('status', 1)
                                ->where('showHome', 'Yes')
                                ->get();
                    }
                    Model > categroy.php
                    Relationship with sub_categories table
                    public function sub_category(){
                        return $this->hasMany(SubCategory::class);
                    }

                    Showing categories in navbar home.blade.php
                    @if(getCategories()->isNotEmpty())
                        @foreach(getCategories() as $category)
                            <li class="nav-item dropdown">
                                <button class="btn btn-dark <?php if($category->sub_category->isNotEmpty()) { echo 'dropdown-toggle'; } ?>" data-bs-toggle="dropdown" aria-expanded="false">
                                    {{$category->name}}
                                </button>
                                @if($category->sub_category->isNotEmpty())
                                <ul class="dropdown-menu dropdown-menu-dark">
                                    @foreach($category->sub_category as $subCategory)
                                        <li><a class="dropdown-item nav-link" href="#">{{$subCategory->name}}</a></li>
                                    @endforeach
                                </ul>
                                @endif
                            </li>
                        @endforeach
                    @endif

                    // Showing categories in category section home.blade.php
                    <div class="row pb-3">
                        @if(getCategories()->isNotEmpty())
                            @foreach(getCategories() as $category)
                                <div class="col-lg-3">
                                    <div class="cat-card">
                                        <div class="left">
                                            @if($category->image != '')
                                            <img src="{{asset('uploads/category/thumb/'.$category->image)}}" alt="" class="img-fluid">
                                            @endif
                                        </div>
                                        <div class="right">
                                            <div class="cat-data">
                                                <h2>{{$category->name}}</h2>
                                                <p></p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            @endforeach
                        @endif
                    </div>

take() :-   This is method showing only product that we want to like 8
            Example :- take(8).

            Latest Products
            <div class="row pb-3">
                @if($latestProducts->isNotEmpty())
                    @foreach($latestProducts as $latestProduct)
                    @php
                        $latestPro = $latestProduct->product_images->first();
                    @endphp
                        <div class="col-md-3">
                            <div class="card product-card">
                                <div class="product-image position-relative">
                                    <a href="" class="product-img">
                                @if(!empty($latestPro->image))
                                <img class="card-img-top" src="{{asset('uploads/products/small/'.$latestPro->image)}}" alt="">
                                @else
                                <img class="card-img-top" src="{{asset('front-assets/images/product-1.jpg')}}" alt="">
                                @endif
                                
                                </a>
                                    <a class="whishlist" href="222"><i class="far fa-heart"></i></a>                            

                                    <div class="product-action">
                                        <a class="btn btn-dark" href="#">
                                            <i class="fa fa-shopping-cart"></i> Add To Cart
                                        </a>                            
                                    </div>
                                </div>                        
                                <div class="card-body text-center mt-3">
                                    <a class="h6 link" href="">{{$latestProduct->title}}</a>
                                    <div class="price mt-2">
                                        <span class="h5"><strong>${{$latestProduct->price}}</strong></span>
                                        @if($latestProduct->compare_price > 0)
                                            <span class="h6 text-underline"><del>${{$latestProduct->compare_price}}</del></span>
                                        @endif
                                    </div>
                                </div>                        
                            </div>                                               
                        </div>  
                    @endforeach
                @endif           
            </div>
        </div>

        FrontController.php
        
        namespace App\Http\Controllers;
        use App\Models\Product;
        use Illuminate\Http\Request;
        
        class FrontController extends Controller
        {
            public function index(){
                $data['featuredProducts'] = Product::where('is_featured', 'Yes')->orderBy('id', 'DESC')->take(8)->where('status', 1)->get();
                $data['latestProducts'] = Product::orderBy('id', 'DESC')->where('status', 1)->take(8)->get();
                return view('front.home',$data);
            }
        }


Part :- 19 Shop page frontend.
    1. php artisan make:controller ShopController
    class ShopController extends Controller
    {
        public function index(){
            $data['categories'] = Category::orderBy('name', 'ASC')->with('sub_category')->where('status', 1)->get();
            $data['brands'] = Brand::orderBy('name', 'ASC')->where('status', 1)->get();
            $data['products'] = Product::orderBy('id', 'DESC')->where('status', 1)->get();
            return view('front.shop', $data);
        }
    }

    2.  app.blade.php
    3.  shop.blade.php
    4.  web.php
        Route::get('shop', [ShopController::class,'index'])->name('front.shop');

Part :- 20 Shop page frontend apply filter
        ShopController.php
        public function index(Request $request, $categorySlug = null, $subCategroy = null){ 
            $categorySelected = '';
            $subCategorySelected = '';
            // Pass the selected brand url
            $brandsArray = [];
            if(!empty($request->get('brand'))){
                $brandsArray = explode(',', $request->get('brand'));
            }
            $data['categories'] = Category::orderBy('name', 'ASC')->with('sub_category')->where('status', 1)->get();
            $data['brands'] = Brand::orderBy('name', 'ASC')->where('status', 1)->get();
            $products = Product::where('status', 1);

            // Apply filters here
            // Categroy filter
            if(!empty($categorySlug)){
                $category = Category::where('slug', $categorySlug)->first();
                $products = $products->where('category_id',  $category->id);
                $categorySelected = $category->id;
            }
            // Subcatgory filter
            if(!empty($subCategroy)){
                $categorySub = SubCategory::where('slug', $subCategroy)->first();
                $products = $products->where('sub_category_id', $categorySub->id);
                $subCategorySelected = $categorySub->id;
            }

            // Brand Filter

            if(!empty($request->get('brand'))){
                $brandsArray = explode(',', $request->get('brand'));
                $products = $products->whereIn('brand_id', $brandsArray);
            }

            // Range filter

            if($request->get('price_max') != '' && $request->get('price_min') != ''){
                // To get the value above the 1000
                if($request->get('price_max') == 1000){
                    $products = $products->whereBetween('price', [intval($request->get('price_min')), 50000000]);
                }else{
                    $products = $products->whereBetween('price', [intval($request->get('price_min')), intval($request->get('price_max'))]);
                }
            }

            // Sorting 

            if($request->get('sort') != ''){
                if($request->get('sort') == 'latest'){
                    $products = $products->orderBy('id', 'DESC');
                }else if($request->get('sort') == 'price_asc'){
                    $products = $products->orderBy('price', 'ASC');
                }else{
                    $products = $products->orderBy('price', 'DESC');
                }
            }else{
                $products = $products->orderBy('id', 'DESC');
            }

            $products = $products->orderBy('id', 'DESC');
            $products = $products->get();
            $data['products'] = $products;
            $data['categorySelected'] = $categorySelected;
            $data['subCategorySelected'] = $subCategorySelected;
            $data['brandsArray'] = $brandsArray;
            $data['priceMax'] = (intval($request->get('price_max')) == 0) ? 1000 : $request->get('price_max');
            $data['priceMin'] = intval($request->get('price_min'));
            $data['sort'] = $request->get('sort');
            //$data['products'] = Product::orderBy('id', 'DESC')->where('status', 1)->get();
            return view('front.shop', $data);
        }


        shop.blade.php
        <input class="form-check-input brand-label" type="checkbox" name="brand[]" value="{{$brand->id}}" id="brand-{{$brand->id}}" {{ (in_array($brand->id, $brandsArray)) ? 'checked' :  ''  }}>
        <input type="text" class="js-range-slider" name="my_range" value="" />
        <select name="sort" id="sort" class="form-control ">
            <option value="latest" {{ ($sort == "latest") ? "selected" : "" }}>Latest</option>
            <option value="price_desc" {{ ($sort == "price_desc") ? "selected" : "" }}>Price High</option>
            <option value="price_asc" {{ ($sort == "price_asc") ? "selected" : "" }}>Price Low</option>
        </select>  

         <script>
        rangSlider = $(".js-range-slider").ionRangeSlider({
            type: 'double',
            min: 0,
            max: 1000,
            from: '{{ ($priceMin) }}',
            to: '{{ ($priceMax) }}',
            step: 10,
            skin: "round",
            max_postfix: '+',
            prefix: "$",
            /* grid: true,
            grid_num: 10 */
            onFinish: function(){
                applyFilter();
            }
        });

        // Save instance to variable
        let slider = $(".js-range-slider").data("ionRangeSlider");

        $('.brand-label').change(function(){
            applyFilter();
        });

        // Sort fiter funtion
        $('#sort').on('change', function(){
            applyFilter();
        });

        function applyFilter(){
            var brands = [];
            let url = '{{ url()->current() }}?';

             // Brand Filter
            $('.brand-label').each(function(){
                if($(this).is(':checked') == true) {
                    brands.push($(this).val());
                }
            })
            if(brands.length > 0){
                url += '&brand='+brands.toString();
            }
            // Price Range filter
            url += '&price_min='+slider.result.from+'&price_max='+slider.result.to;

            // Sorting filter

            url += '&sort='+$('#sort').val();   

            //window.location.href = url+'&brand='+brands.toString();
            window.location.href = url;
            
        }

       
   </script>


intval() :- This function is convert the string value into numeric value.

Part :- 21 Shop Pagination.
    Upload the dummy product with laravel factory :- php artisan make:factory ProductFactory
    This file is avaliable inside :- database > factory > ProductFactory.php

    public function definition(): array
    {
        $title = fake()->unique()->name();  
        $slug = Str::slug($title);
        $subCategories = [3,9];
        $subCateRandKey = array_rand($subCategories);
        $brands = [1,2,3];
        $brandRandKey = array_rand($brands);
        return [
            'title' => $title,
            'slug' => $slug,
            'description' => '',
            'category_id' => 2,
            'sub_category_id' => $subCategories[$subCateRandKey],
            'brand_id' => $brands[$brandRandKey],
            'price' => rand(10, 1000),
            'sku' => rand(1000, 10000),
            'track_qty' => 'Yes',
            'qty' => 10,
            'is_featured' => 'Yes',
            'status' => 1
        ];
    }

    Open seeder > DatabaseSeeder.php
    use App\Models\Product;
    // Create Dummy Products in database
        Product::factory(30)->create();

    php artisan db:seed

Part :- 22 Product Front Page.
    First we create a shipping return, Short description section inside the product section in admin panel and store, update this values.
    Create a this fields inside the products table.
    admin > ProductController.php

    ShopController.php
    public function product(Request $request, $slug){
        //echo $slug;
        $product = Product::where('slug', $slug)->with('product_images')->first();
        // If slug not found then 404 message is showing
        if($product == null){
            abort(404);
        }
        $data['product'] = $product;
        return view('front.product', $data);
    }

    View > front > product.blade.php

Part :- 23 Related Product frontend.
        Add field related product inside the admin panel and product section with store,edit,update function. admin > ProductController.php

        public function getProducts(Request $request){
            $tempProduct = [];
            if($request->term != ''){
                $products = Product::where('title','like','%'.$request->term.'%')->get();
                if($products != null){
                    foreach($products as $product){
                        $tempProduct[] = array('id' => $product->id, 'text' => $product->title);
                    }
                }
            }
            //print_r($tempProduct);
            return response()->json([
                'tags' => $tempProduct,
                'status' => true
            ]);
        }

        View > admin > app.blade.php

        // Select 2
        $('.related_products').select2({
            ajax: {
                url: '{{ route("products.getProducts") }}',
                dataType: 'json',
                tags: true,
                multiple: true,
                minimumInputLength: 3,
                processResults: function (data) {
                    return {
                        results: data.tags
                    };
                }
            }
        });

        ShopController.php
        public function product(Request $request, $slug){
            //echo $slug;
            $product = Product::where('slug', $slug)->with('product_images')->first();
            // If slug not found then 404 message is showing
            if($product == null){
                abort(404);
            }

            // Get related products
            $relatedProducts = [];
            if($product->related_products != ''){
                $productArray = explode(',',$product->related_products);
                $relatedProducts = Product::whereIn('id',$productArray)->with('product_images')->get();
            }

            $data['product'] = $product;
            $data['relatedProducts'] = $relatedProducts;
            return view('front.product', $data);
        }    

        view > admin > product.blade.php
        Add functionality of related products

    Goto the view > front > product.blade.php
    Create a related product section.

Part :- 24 Add to Cart frontend
    Add to cart :- This feature is working with two option.
        1. Session :- First we click on add to cart button we stored all the information in session. We make a array in session and store all the information inside it with array index.
        2. Tempary table :- We create a table inside the database and we name it temp_cart. When we click on add to cart button we store the information inside the table with session id. Behalf of this session id we understand which user is add which product.
    
    And inside a laravel provide a libaray (laravelShoppingCart) with the help of this libaray we implment cart function. This is a another option for cart functionality.
    Libaray :- composer require hardevine/shoppingcart

    php artisan make:controller CartController
    php artisan make:view front/cart

    CartController.php

    class CartController extends Controller
    {
        public function addToCart(Request $request){
            $product = Product::with('product_images')->find($request->id);
            if($product == null){
                return response()->json([
                    'status' => false,
                    'message' => 'Product not found'
                ]);
            }

            if(Cart::count() > 0){
                //echo "Product already in cart";
                // Products found in Cart
                // Check if this product already in the cart
                // Return a message product already add in your cart
                // If product not found in the cart then add product in cart.
                $cartContent = Cart::content(); // We get the product is add in cart.
                $productAlreadyExist = false;

                foreach($cartContent as $item){
                    if($item->id == $product->id){
                        $productAlreadyExist = true;
                    }
                }

                if($productAlreadyExist == false){
                    Cart::add($product->id, $product->title, 1, $product->price, ['productImage' => (!empty($product->product_images)) ?  $product->product_images->first() : '']);
                    $status = true;
                    $message = $product->title." added in cart";
                }else{
                    $status = false;
                    $message = $product->title." already added in cart";
                }

            }else{
                //echo "Cart is empty now add product in cart";
                // Cart is empty
                Cart::add($product->id, $product->title, 1, $product->price, ['productImage' => (!empty($product->product_images)) ?  $product->product_images->first() : '']);
                $status = true;
                $message = $product->title.' added in cart';
            }

            return response()->json([
                'status' => $status,
                'message' =>  $message
            ]);
        }

        public function cart(){
            //dd(Cart::content());
            $data['cartContent'] = Cart::content();
            return view('front.cart', $data);
        }

        View > Front > cart.blade.php

        Front > layout > app.blade.php
        
        function addToCart(id){
            $.ajax({
                url:'{{ route("front.addToCart") }}',
                type: 'post',
                data: {id:id},
                dataType: 'json',
                success: function(response){
                    if(response.status == true){
                        window.location.href = '{{ route("front.cart") }}';
                    }else{
                        alert(response.message);
                    }   
                },
                error: function(jqXHR){

                }
            })
        }

        web.php

        Route::get('cart',[CartController::class,'cart'])->name('front.cart');
        Route::post('add-to-cart',[CartController::class,'addToCart'])->name('front.addToCart');


Part :- 25 Update cart frontend.
    web.php 
    Route::post('update-cart',[CartController::class,'upDateCart'])->name('front.upDateCart');
    Route::post('delete-item',[CartController::class,'deleteItem'])->name('front.deleteItem.cart');

    CartController.php

    namespace App\Http\Controllers;
    use App\Models\Product;
    use Gloudemans\Shoppingcart\Facades\Cart;
    use Illuminate\Http\Request;

    use function Laravel\Prompts\confirm;

    class CartController extends Controller
    {
        public function addToCart(Request $request){
            $product = Product::with('product_images')->find($request->id);
            if($product == null){
                return response()->json([
                    'status' => false,
                    'message' => 'Product not found'
                ]);
            }

            if(Cart::count() > 0){
                //echo "Product already in cart";
                // Products found in Cart
                // Check if this product already in the cart
                // Return a message product already add in your cart
                // If product not found in the cart then add product in cart.
                $cartContent = Cart::content(); // We get the product is add in cart.
                $productAlreadyExist = false;

                foreach($cartContent as $item){
                    if($item->id == $product->id){
                        $productAlreadyExist = true;
                    }
                }

                if($productAlreadyExist == false){
                    Cart::add($product->id, $product->title, 1, $product->price, ['productImage' => (!empty($product->product_images)) ?  $product->product_images->first() : '']);
                    $status = true;
                    $message = '<strong>'.$product->title.'</strong> added in your cart successfully';
                    session()->flash('success', $message);
                }else{
                    $status = false;
                    $message = $product->title." already added in cart";
                }

            }else{
                //echo "Cart is empty now add product in cart";
                // Cart is empty
                Cart::add($product->id, $product->title, 1, $product->price, ['productImage' => (!empty($product->product_images)) ?  $product->product_images->first() : '']);
                $status = true;
                $message = '<strong>'.$product->title.'</strong> added in your cart successfully';
                session()->flash('success', $message);
            }

            return response()->json([
                'status' => $status,
                'message' =>  $message
            ]);
        }

        public function cart(){
            //dd(Cart::content());
            $data['cartContent'] = Cart::content();
            return view('front.cart', $data);
        }

        public function upDateCart(Request $request){
            $rowId = $request->rowId;
            $qty = $request->qty;

            // Check qty avaliable in stock
            $itemInfo = Cart::get($rowId);
            $product = Product::find($itemInfo->id);
            if($product->track_qty == 'Yes'){
                if($qty  <= $product->qty){
                    Cart::update($rowId, $qty);
                    $message = 'Cart updated successfully';
                    $status = true;
                    session()->flash('success', $message);
                }else{
                    $message = 'Requested qty ('.$qty.') not avaliable in stock';
                    $status = false;
                    session()->flash('error', $message);
                }
            }else{
                Cart::update($rowId, $qty);
                $message = 'Cart updated successfully';
                $status = true;
                session()->flash('success', $message);
            }
        
            return response()->json([
                'status' => $status,
                'message' => $message
            ]);
        }

        public function deleteItem(Request $request){
            $rowId = $request->rowId;
            $itemInfo = Cart::get($rowId);
            if($itemInfo == null){
                $errorMessage = 'Item not found in cart';
                session()->flash('error', $errorMessage);
                return response()->json([
                    'status' => false,
                    'message' => $errorMessage
                ]);
            }
            Cart::remove($request->rowId);
            session()->flash('success', 'Item remove form cart successfully');
            return response()->json([
                'status' => true,
                'message' => 'Item remove form cart successfully'
            ]);
        }

    }

    View > front > cart.blade.php :- Check this page HTML with script
    <script>
        $('.add').click(function(){
            var qtyElement = $(this).parent().prev(); // Qty Input
            var qtyValue = parseInt(qtyElement.val());
            if (qtyValue < 10) {
                qtyElement.val(qtyValue+1);
                var rowId = $(this).data('id');
                var newQty = qtyElement.val();
                upDataCart(rowId, newQty)
            }            
        });

        $('.sub').click(function(){
            var qtyElement = $(this).parent().next(); 
            var qtyValue = parseInt(qtyElement.val());
            if (qtyValue > 1) {
                qtyElement.val(qtyValue-1);
                var rowId = $(this).data('id');
                var newQty = qtyElement.val();
                upDataCart(rowId, newQty)
            }        
        });

        function upDataCart(rowId, qty){
            $.ajax({
                url: '{{ route("front.upDateCart") }}',
                type: 'post',
                data:{rowId:rowId, qty:qty},
                datatype: 'json',
                success: function(response){
                    //console.log(response);
                    /* if(response.status == true){
                        window.location.href = '{{ route("front.cart") }}';
                    } */
                    window.location.href = '{{ route("front.cart") }}';
                    
                },
                error: function(jqXHR){
                    console.log('Something went wrong');
                }
            });
        }

        /* <div class="alert alert-warning alert-dismissible fade show" role="alert">
        <strong>Holy guacamole!</strong> You should check in on some of those fields below.
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div> */

        function deleteItem(rowId){
            if(confirm('Are you sure you want to delete item.')){
                    $.ajax({
                        url : '{{ route("front.deleteItem.cart") }}',
                        type : 'post',
                        data : {rowId:rowId},
                        datatype : 'json',
                        success : function(response){
                            //console.log(response);
                           window.location.href = "{{ route('front.cart') }}"
                        }
                    })
                }
            }
    </script> 

Part :- 26 Registered user frontend.
        1. php artisan make:controller AuthController
        2. php artisan make:view front/account/regiter 
        3. php artisan make:view front/account/login
        4. php artisan make:migration alter_users_table
            2024_08_31 alter_user_table.php
            public function up(): void
            {
            Schema::table('users', function(Blueprint $table){
                $table->string('phone')->nullable()->after('email');
            });
            }

            public function down(): void
            {
                Schema::table('users', function(Blueprint $table){
                    $table->removeColumn('phone');
                });
            }

            php artisan migrate

        web.php

        Route::group(['prefix' => 'account/'], function(){
            Route::group(['middleware' => 'guest'], function(){
                Route::get('register',[AuthController::class,'register'])->name('account.register');
                Route::post('process-register',[AuthController::class,'processRegister'])->name('account.processRegister');
                Route::get('login',[AuthController::class,'login'])->name('account.login');
            });

            Route::group(['middleware' => 'auth'], function(){

            });
        });

        AuthController.php

        namespace App\Http\Controllers;
        use App\Models\User;
        use Illuminate\Http\Request;
        use Illuminate\Support\Facades\Hash;
        use Illuminate\Support\Facades\Validator;

        class AuthController extends Controller
        {
            public function login(){
                return view('front.account.login');
            }

            public function register(){
                return view('front.account.register');
            }

            public function processRegister(Request $request){
                $validator = Validator::make($request->all(),[
                    'name' => 'required|min:3',
                    'email' => 'required|email|unique:users',
                    'password' => 'required|min:5|confirmed'
                ]);

                if($validator->passes()){
                    $user = new User;
                    $user->name = $request->name;
                    $user->email = $request->email;
                    $user->phone = $request->phone;
                    $user->password = Hash::make($request->password);
                    $user->save();
                    session()->flash('success', 'You have been registered successfully');
                    return response()->json([
                        'status' => true,
                        'message' => ''
                    ]);
                }else{
                    return response()->json([
                        'status' => false,
                        'errors' => $validator->errors()
                    ]);
                }
            }
        }

        view > front > account > register.blade.php with HTML
        @section('customJs')
            <script type="text/javascript">
                $('#registerationForm').submit(function(event){
                    event.preventDefault();
                    $("button[type = 'submit']").prop('disabled', true);
                    $.ajax({
                        url: '{{ route("account.processRegister") }}',
                        type: 'post',
                        data: $(this).serializeArray(),
                        dataType: 'json',
                        success: function(response){
                            $("button[type = 'submit']").prop('disabled', false);
                            var errors = response.errors;
                            if(response.status == false){
                                if(errors.name){
                                    $('#name').siblings("p").addClass('invalid-feedback').html(errors.name);
                                    $('#name').addClass('is-invalid'); 
                                }else{
                                    $('#name').siblings("p").removeClass('invalid-feedback').html('');
                                    $('#name').removeClass('is-invalid'); 
                                    
                                }

                                if(errors.email){
                                    $('#email').siblings("p").addClass('invalid-feedback').html(errors.email);
                                    $('#email').addClass('is-invalid'); 
                                }else{
                                    $('#email').siblings("p").removeClass('invalid-feedback').html('');
                                    $('#email').removeClass('is-invalid'); 
                                }

                                if(errors.password){
                                    $('#password').siblings("p").addClass('invalid-feedback').html(errors.password);
                                    $('#password').addClass('is-invalid'); 
                                }else{
                                    $('#password').siblings("p").removeClass('invalid-feedback').html('');
                                    $('#password').removeClass('is-invalid'); 
                                }
                            }else{
                                $('#name').siblings("p").removeClass('invalid-feedback').html('');
                                $('#name').removeClass('is-invalid'); 

                                $('#email').siblings("p").removeClass('invalid-feedback').html('');
                                $('#email').removeClass('is-invalid'); 

                                $('#password').siblings("p").removeClass('invalid-feedback').html('');
                                $('#password').removeClass('is-invalid'); 

                                window.location.href = "{{ route('account.login') }}";
                            }
                            
                        },
                        error: function(jqXHR, exception){
                            console.log('Somthing went wrong');
                        }
                    });
                });
            </script>
        @endsection

Part :- 27 User Authentication frontend
        php artisan make:view front/account/profile
        php artisan make:view front/account/common/sidebar

        web.php
        Route::group(['prefix' => 'account/'], function(){
            Route::group(['middleware' => 'guest'], function(){
                Route::get('login',[AuthController::class,'login'])->name('account.login');
                Route::post('login',[AuthController::class,'authenticate'])->name('account.authenticate');
                Route::get('register',[AuthController::class,'register'])->name('account.register');
                Route::post('process-register',[AuthController::class,'processRegister'])->name('account.processRegister');
            });
            
            Route::group(['middleware' => 'auth'], function(){
                Route::get('profile',[AuthController::class,'profile'])->name('account.profile');
                Route::get('logout',[AuthController::class,'logout'])->name('account.logout');
            });
        });

        AuthController.php
        public function authenticate(Request $request){
            $validator = Validator::make($request->all(), [
                'email' => 'required|email',
                'password' => 'required'
            ]);

            if($validator->passes()){
            if(Auth::attempt(['email' => $request->email, 'password' => $request->password], $request->get('remember'))){
                    return redirect()->route('account.profile');
            }else{
                    //session()->flash('error', 'Either email/password is incorrect');
                    return redirect()->route('account.login')->withInput($request->only('email'))->with('error', 'Either email/password is incorrect');
            }

            }else{
                return redirect()->route('account.login')
                ->withErrors($validator)
                ->withInput($request->only('email'));
            }
        }

        public function profile(){
            return view('front.account.profile');
        }

        public function logout(){
            Auth::logout();
            return redirect()->route('account.login')->with('success', 'You successfully logged out');
        }

        Check the html of this pages
        View > front > account > common > sidebar.blade.php
        View > front > account > profile.blade.php

        Open the kernel.php file and changed it according to tutorial.

Part :- 28 Setup Checkout page frontend
        AuthController.php
        if(session()->has('url.intended')){
            return redirect(session()->get('url.intended'));
        }

        php artisan make:migration create_countries_table
        2024_0_31_create_countries_table.php

        Schema::create('countries', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('code');
            $table->timestamps();
        });

        php artisan migrate

        php artisan make:seeder CountrySeeder // For insert the country data inside the country table.
        Open the seeder file copy the data from laravel-part-28 file and past all the country data inside this.
        file.

        Run the seeder file in CMD :-
        php artisan db:seed --class=CountrySeeder

        php artisan make:model Country

        CartController.php
        public function checkout(){
        
            // If cart is empty redirect to cart
            if(Cart::count() == 0){
                return redirect()->route('front.cart');
            }

            // If user not login then redirect to login page
            if(Auth::check() == false){
                if(!session()->has('url.intended')){
                session(['url.intended' => url()->current()]);
            }
                return redirect()->route('account.login');
            }

            session()->forget('url.intended');

            $countries = Country::orderBy('name', 'ASC')->get();
            return view('front.checkout', ['countries' => $countries]);
        }

        View > front > checkout.blade.php :- Check the html with script
        @section('customJs')
            <script>
                    $('#payment_method_one').click(function(){
                    if($(this).is(':checked') == true){
                        $('#card-payment-form').addClass('d-none');
                    }
                    });

                    $('#payment_method_two').click(function(){
                        if($(this).is(':checked') == true){
                            $('#card-payment-form').removeClass('d-none');
                        }
                    });
            </script>
        @endsection


Part :- 29 Checkout save customer orders frontend.
        php artisan make:migration create_orders_table // Store the orders data total,shipping charges etc.
        php artisan make:migration create_order_items_table // Store user products orders.
        php artisan make:migration create_customer_addresses_table // Store user address.

        migrations > 
        2024_08_31_orders_table.php
             Schema::create('orders', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->double('subtotal', 10,2);
            $table->double('shipping', 10,2);
            $table->string('coupon_code')->nullable();
            $table->double('discount', 10,2)->nullable();
            $table->double('grand_total', 10,2);

            // User Address related columns

            $table->string('first_name');
            $table->string('last_name');
            $table->string('email');
            $table->string('mobile');
            $table->foreignId('country_id')->constrained()->onDelete('cascade');
            $table->text('address');
            $table->string('apartment')->nullable();
            $table->string('city');
            $table->string('state');
            $table->string('zip');
            $table->text('notes');
            $table->timestamps();
        });

        2024_08_31_order_items_table.php
          public function up(): void
            {
                Schema::create('order_items', function (Blueprint $table) {
                    $table->id();
                    $table->foreignId('order_id')->constrained()->onDelete('cascade');
                    $table->foreignId('product_id')->constrained()->onDelete('cascade');
                    $table->string('name');
                    $table->integer('qty');
                    $table->double('price', 10,2);
                    $table->double('total', 10,2);
                    $table->timestamps();
                });
            }
         2024_08_31_order_customer_addresses_table.php
         public function up(): void
        {
            Schema::create('customer_addresses', function (Blueprint $table) {
                $table->id();
                $table->foreignId('user_id')->constrained()->onDelete('cascade');
                $table->string('first_name');
                $table->string('last_name');
                $table->string('email');
                $table->string('mobile');
                $table->foreignId('country_id')->constrained()->onDelete('cascade');
                $table->text('address');
                $table->string('apartment')->nullable();
                $table->string('city');
                $table->string('state');
                $table->string('zip');
                $table->timestamps();
            });
    }

    php artisan migrate
        web.php
        Route::post('process-checkout',[CartController::class,'processCheckout'])->name('front.processCheckout');

        php artisan make:model CustomerAddress

        php artisan make:model OrderItem  
        php artisan make:view front/thankyou

        web.php
        Route::get('thanks/{orderId}',[CartController::class,'thankyou'])->name('front.thankyou');

    CartController.php
    <?php

        namespace App\Http\Controllers;

        use App\Models\Country;
        use App\Models\CustomerAddress;
        use App\Models\Order;
        use App\Models\OrderItem;
        use App\Models\Product;

        use Gloudemans\Shoppingcart\Facades\Cart;
        use Illuminate\Http\Request;
        use Illuminate\Support\Facades\Auth;
        use Illuminate\Support\Facades\Validator;

        use function Laravel\Prompts\confirm;

        class CartController extends Controller
        {
            public function addToCart(Request $request){
                $product = Product::with('product_images')->find($request->id);
                if($product == null){
                    return response()->json([
                        'status' => false,
                        'message' => 'Product not found'
                    ]);
                }

                if(Cart::count() > 0){
                    //echo "Product already in cart";
                    // Products found in Cart
                    // Check if this product already in the cart
                    // Return a message product already add in your cart
                    // If product not found in the cart then add product in cart.
                    $cartContent = Cart::content(); // We get the product is add in cart.
                    $productAlreadyExist = false;

                    foreach($cartContent as $item){
                        if($item->id == $product->id){
                            $productAlreadyExist = true;
                        }
                    }

                    if($productAlreadyExist == false){
                        Cart::add($product->id, $product->title, 1, $product->price, ['productImage' => (!empty($product->product_images)) ?  $product->product_images->first() : '']);
                        $status = true;
                        $message = '<strong>'.$product->title.'</strong> added in your cart successfully';
                        session()->flash('success', $message);
                    }else{
                        $status = false;
                        $message = $product->title." already added in cart";
                    }

                }else{
                    //echo "Cart is empty now add product in cart";
                    // Cart is empty
                    Cart::add($product->id, $product->title, 1, $product->price, ['productImage' => (!empty($product->product_images)) ?  $product->product_images->first() : '']);
                    $status = true;
                    $message = '<strong>'.$product->title.'</strong> added in your cart successfully';
                    session()->flash('success', $message);
                }

                return response()->json([
                    'status' => $status,
                    'message' =>  $message
                ]);
            }

            public function cart(){
                //dd(Cart::content());
                $data['cartContent'] = Cart::content();
                return view('front.cart', $data);
            }

            public function upDateCart(Request $request){
                $rowId = $request->rowId;
                $qty = $request->qty;

                // Check qty avaliable in stock
                $itemInfo = Cart::get($rowId);
                $product = Product::find($itemInfo->id);
                if($product->track_qty == 'Yes'){
                    if($qty  <= $product->qty){
                        Cart::update($rowId, $qty);
                        $message = 'Cart updated successfully';
                        $status = true;
                        session()->flash('success', $message);
                    }else{
                        $message = 'Requested qty ('.$qty.') not avaliable in stock';
                        $status = false;
                        session()->flash('error', $message);
                    }
                }else{
                    Cart::update($rowId, $qty);
                    $message = 'Cart updated successfully';
                    $status = true;
                    session()->flash('success', $message);
                }
            
                return response()->json([
                    'status' => $status,
                    'message' => $message
                ]);
            }

            public function deleteItem(Request $request){
                $rowId = $request->rowId;
                $itemInfo = Cart::get($rowId);
                if($itemInfo == null){
                    $errorMessage = 'Item not found in cart';
                    session()->flash('error', $errorMessage);
                    return response()->json([
                        'status' => false,
                        'message' => $errorMessage
                    ]);
                }
                Cart::remove($request->rowId);
                session()->flash('success', 'Item remove form cart successfully');
                return response()->json([
                    'status' => true,
                    'message' => 'Item remove form cart successfully'
                ]);
            }

            public function checkout(){
                
                // If cart is empty redirect to cart
                if(Cart::count() == 0){
                    return redirect()->route('front.cart');
                }

                // If user not login then redirect to login page
                if(Auth::check() == false){
                    if(!session()->has('url.intended')){
                    session(['url.intended' => url()->current()]);
                }
                    return redirect()->route('account.login');
                }

                $user = Auth::user()->id;
                $customerAddress = CustomerAddress::where('user_id',$user)->first();
                session()->forget('url.intended');

                $countries = Country::orderBy('name', 'ASC')->get();
                return view('front.checkout', ['countries' => $countries, 'customerAddress' => $customerAddress]);
            }

            public function processCheckout(Request $request){
                // Step 1 :-  Apply Validation
            $validator = Validator::make($request->all(),[
                'first_name' => 'required|min:5',
                'last_name' => 'required',
                'email' => 'required|email',
                'country' => 'required',
                'address' => 'required|min:30',
                'city' => 'required',
                'state' => 'required',
                'zip' => 'required',
                'mobile' => 'required'
            ]);

            if($validator->fails()){
                return response()->json([
                    'status' => false,
                    'errors' => $validator->errors(),
                    'message' => 'Please fix the errors'
                ]);
            }

            // Step 2 :- Save customer address
            $user = Auth::user();     
                CustomerAddress::updateOrCreate(
                    // First we check data is exists
                    ['user_id' => $user->id],
                    // 
                    [ 
                        'user_id' => $user->id,
                        'first_name' => $request->first_name,
                        'last_name' => $request->first_name,
                        'email' => $request->email,
                        'mobile' => $request->mobile,
                        'country_id' => $request->country,
                        'address' => $request->address,
                        'apartment' => $request->apartment,
                        'city' => $request->city,
                        'state' => $request->state,
                        'zip' => $request->zip
                    ]
                
                );

                // Step 3 :- Store data in Order table
                // Check the payment methods
                if($request->payment_method == 'cod'){
                    $shipping = 0;
                    $discount = 0;
                    $subTotal = Cart::subtotal(2,'.','' );
                    $grandTotal = $subTotal+$shipping;
                    $order = new Order;
                    $order->subtotal =  $subTotal;
                    $order->shipping =  $shipping;
                    $order->grand_total =  $grandTotal;
                    $order->user_id = $user->id;
                    $order->first_name =  $request->first_name;
                    $order->last_name =  $request->last_name;
                    $order->email =  $request->email;
                    $order->mobile =  $request->mobile;
                    $order->country_id =  $request->country;
                    $order->address =  $request->address;
                    $order->apartment =  $request->apartment;
                    $order->state =  $request->state;
                    $order->city =  $request->city;
                    $order->zip =  $request->zip;
                    $order->notes =  $request->order_notes;
                    $order->save();

                // Step :- 4 Store order items in order items table.
                    foreach(Cart::content() as $item){
                        $orderItem =new OrderItem;
                        $orderItem->product_id = $item->id;
                        $orderItem->order_id = $order->id;
                        $orderItem->name = $item->name;
                        $orderItem->qty = $item->qty;
                        $orderItem->price = $item->price;
                        $orderItem->total = $item->price*$item->qty;
                        $orderItem->save();
                    }

                    session()->flash('success', 'You have successfully placed your order');
                    // Remove the item from cart page when the order is placed.
                    Cart::destroy();
                    return response()->json([
                        'status' => true,
                        'message' => 'Order saved successfully',
                        'orderId' => $order->id
                    ]);
                }else{

                }
            }

            public function thankyou($id){
                return view('front.thankyou', ['id' => $id]);
            }

        }

        ?>


        View > front > thankyou.blade.php

Part :- 30 Managa shipping in Admin
        php artisan make:migration create_shipping_charges_table
        public function up(): void
        {
            Schema::create('shipping_charges', function (Blueprint $table) {
                $table->id();
                $table->string('country_id');
                $table->double('amount', 10,2);
                $table->timestamps();
            });
        }

        php artisan migrate
        php artisan make:controller Admin/ShippingController
        php artisan make:model Shipping
        php artisan make:view admin/shipping/create

        web.php
        Route::get('shipping/create',[ShippingController::class,'create'])->name('shipping.create');
        Route::post('shipping',[ShippingController::class,'store'])->name('shipping.store');
        Route::get('shipping/{id}',[ShippingController::class,'edit'])->name('shipping.edit');
        Route::put('shipping/{id}',[ShippingController::class,'update'])->name('shipping.update');
        Route::delete('shipping/{id}', [ShippingController::class,'destroy'])->name('shipping.delete');

        php artisan make:view admin/shipping/edit
        Route::git('shipping/edit',[ShippingController::class,'edit'])->name('shipping.edit');

        ShippingController.php
        namespace App\Http\Controllers\Admin;

        use App\Http\Controllers\Controller;
        use App\Models\Country;
        use App\Models\ShippingCharge;
        use Illuminate\Http\Request;
        use Illuminate\Support\Facades\Validator;

        class ShippingController extends Controller
        {
            public function create(){
                $country = Country::get();
                $data['shippingCharger'] = ShippingCharge::select('shipping_charges.*','countries.name')
                                        ->leftJoin('countries','countries.id','shipping_charges.country_id')
                                        ->get();
                $data['countries'] = $country;
                return view('admin/shipping/create', $data);
            }

            public function store(Request $request){
                $countryCheck = ShippingCharge::where('country_id', $request->country)->count();
                
                $validator = Validator::make($request->all(),[
                    'country' => 'required',
                    'amount' => 'required|numeric'
                ]);
                if($validator->passes()){
                    if($countryCheck > 0){
                        session()->flash('error', 'Shipping already added.');
                        return response()->json([
                            'status' => true,
                            'message' => 'Shipping already added.'
                        ]);
                    }
                    $shipping = new ShippingCharge;
                    $shipping->country_id = $request->country;
                    $shipping->amount = $request->amount;
                    $shipping->save();
                    session()->flash('success', 'Shipping chargers store successfully');
                    return response()->json([
                        'status' => true,
                        'message' => 'Shipping chargers store successfully'
                    ]);
                }else{
                    return response()->json([
                        'status' => false,
                        'errors' => $validator->errors()
                    ]);
                }
            }

            public function edit(Request $request, $id){

                $country = Country::get();
                $data['shippingCharger'] = ShippingCharge::find($id);
                $data['countries'] = $country;

                return view('admin.shipping.edit', $data);
            }

            public function update(Request $request, $id){
                $shipping =  ShippingCharge::find($id);
                $validator = Validator::make($request->all(),[
                    'country' => 'required',
                    'amount' => 'required|numeric'
                ]);
                if($validator->passes()){
                    if($shipping == null){
                        session()->flash('error', 'Shipping not found.');
                        return response()->json([
                            'status' => true,
                            'message' => 'Shipping not found.'
                        ]);
                    }
                    
                    $shipping->country_id = $request->country;
                    $shipping->amount = $request->amount;
                    $shipping->save();
                    session()->flash('success', 'Shipping chargers updated successfully');
                    return response()->json([
                        'status' => true,
                        'message' => 'Shipping chargers updated successfully'
                    ]);
                }else{
                    return response()->json([
                        'status' => false,
                        'errors' => $validator->errors()
                    ]);
                }
            }

            public function destroy($id){
                $shippingCharge = ShippingCharge::find($id);
                if($shippingCharge == null){
                    session()->flash('error', 'Shipping not found.');
                    return response()->json([
                        'status' => true,
                        'message' => 'Shipping not found.'
                    ]);
                }
                $shippingCharge->delete();
                session()->flash('success', 'Shipping deleted successfully.');
                return response()->json([
                    'status' => true,
                    'message' => 'Shipping deleted successfully.'
                ]);
            }

        }

        View > admin > shipping > create.blade.php/edit.blade.php

Part :- 31 Checkout Apply shipping frontend.
        number_format() :- This display the price with 2 decimal point.
        CartController.php
        checkout.blade.php
        cart.blade.php

        web.php
        Route::get('checkout',[CartController::class,'checkout'])->name('front.checkout');
        Route::post('process-checkout',[CartController::class,'processCheckout'])->name('front.processCheckout');
        Route::get('thanks/{orderId}',[CartController::class,'thankyou'])->name('front.thankyou');
        Route::post('get-order-summery',[CartController::class,'getOrderSummery'])->name('front.getOrderSummery');


Part :- 32 Discount Coupen Create backend.
        php artisan make:migration create_discount_coupons_table
        migration file.

            $table->id();
            $table->string('code'); // The discoumt coupon code
            $table->string('name')->nullable(); // The human readable discount coupon code name.
            $table->text('description')->nullable(); // The description of the coupon - not necessary.
            $table->integer('max_uses')->nullable(); // The max uses this discount coupon has.
            $table->integer('max_uses_user')->nullable(); // How many times a user can use this coupon code.
            $table->enum('type',['percent', 'fixed'])->default('fixed'); // Whether or not the coupon is a percentage or a fixed price.
            $table->double('discount_amount',10,2); // The amount to discount based on type.
            $table->double('min_amount',10,2)->nullable(); // Compare the min_amount with subtotal if subtotal equal or greaterthan min_amount.
            $table->integer('status')->default(1);    // Status active/deactive.
            $table->timestamp('starts_at')->nullable();    // When the coupon begins.
            $table->timestamp('expires_at')->nullable(); // When the coupon end.
            $table->timestamps();

        php artisan migrate
        php artisan make:controller Admin/DiscountCodeController
        php artisan make:view admin/coupon/create
        php artisan make:model DiscountCoupon

        lte() :- This method mean's less then equal.
        gt() :- This method mean's greator then.

        php artisan make:view admin/coupon/list

        DiscountCodeController.php
        namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\DiscountCoupon;
use Illuminate\Http\Request;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Validator;

class DiscountCodeController extends Controller
{
    public function index(){
        return view('admin.coupon.list');
    }

    public function create(){
        return view('admin.coupon.create');
    }

    public function store(Request $request){
        $validator = Validator::make($request->all(),[
            'code' => 'required',
            'type' => 'required',
            'discount_amount' => 'required|numeric',
            'status' => 'required'
        ]);

        if($validator->passes()){

            // Starting date must be greater than current date.
            if(!empty($request->starts_at)){
                $now = Carbon::now(); // To get the time/date with Carbon libaray.
                $startAt = Carbon::createFromFormat('Y-m-d H:i:s',$request->starts_at);
                if($startAt->lte($now) == true){
                    return response()->json([
                        'status' => false,
                        'errors' => ['starts_at' => 'Starts date can not be less than current date time']
                    ]);
                }
            }

            // Expire date must be greater than start date.

            if(!empty($request->starts_at) && !empty($request->expires_at)){
                $now = Carbon::now(); // To get the time/date with Carbon libaray.
                $expiresAt = Carbon::createFromFormat('Y-m-d H:i:s',$request->expires_at);
                $startAt = Carbon::createFromFormat('Y-m-d H:i:s',$request->starts_at);
                if($expiresAt->gt($startAt) == false){
                    return response()->json([
                        'status' => false,
                        'errors' => ['expires_at' => 'Expiry date must be greator than start date']
                    ]);
                }
            }

            $discountCode = new DiscountCoupon;
            $discountCode->code = $request->code;
            $discountCode->name = $request->name;
            $discountCode->description = $request->description;
            $discountCode->max_uses = $request->max_uses;
            $discountCode->max_uses_user = $request->max_uses_user;
            $discountCode->type = $request->type;
            $discountCode->discount_amount = $request->discount_amount;
            $discountCode->min_amount = $request->min_amount;
            $discountCode->status = $request->status;
            $discountCode->starts_at = $request->starts_at;
            $discountCode->expires_at = $request->expires_at;
            $discountCode->save();
            $message = 'Discount Coupon added successfully';
            session()->flash('success', $message);
            return response()->json([
                'status' => true,
                'message' => $message,
                'data' => $discountCode
            ]);

        }else{
            return response()->json([
                'status' => false,
                'errors'  => $validator->errors()
            ]);
        }

    }

    view admin/coupon/create.blade.php

Part :- 33 Discount coupon list Backend. 
    DiscountCodeController.php
    public function index(Request $request){
        $discountCoupons = DiscountCoupon::latest();
        if(!empty($request->get('keyword'))){
            $discountCoupons = $discountCoupons->whereAny(['code', 'name', 'discount_amount'],'like','%'.$request->get('keyword').'%');
        }
        $discountCoupons = $discountCoupons->paginate(10);
        return view('admin.coupon.list', ['discountCoupons' => $discountCoupons]);
    }

    view > admin > coupon > list.blade.php
    
    web.php
    Route::get('coupons',[DiscountCodeController::class,'index'])->name('coupons.index');

Part :- 34 Discount Coupon Edit, delete Admin.
        php artisan make:view admin/coupon/edit

        DiscountCodeController.php
        public function edit(Request $request, $id){
        $data['coupon'] = DiscountCoupon::find($id);
        if($data['coupon'] == null){
            session()->flash('error', 'Discount coupon not found');
            return redirect()->route('coupon.index');
        }
        return view('admin.coupon.edit', $data);

        }

        public function update(Request $request, $id){
            $discountCode = DiscountCoupon::find($id);

            if($discountCode == null){
                session()->flash('error', 'Discount Coupon not found.');
                return response()->json([
                    'status' => true
                ]);
            }

            $validator = Validator::make($request->all(),[
                'code' => 'required',
                'type' => 'required',
                'discount_amount' => 'required|numeric',
                'status' => 'required'
            ]);

            if($validator->passes()){
                // Starting date must be greater than current date.
                /* if(!empty($request->starts_at)){
                    $now = Carbon::now(); // To get the time/date with Carbon libaray.
                    $startAt = Carbon::createFromFormat('Y-m-d H:i:s',$request->starts_at);
                    if($startAt->lte($now) == true){
                        return response()->json([
                            'status' => false,
                            'errors' => ['starts_at' => 'Starts date can not be less than current date time']
                        ]);
                    }
                } */

                // Expire date must be greater than start date.

                if(!empty($request->starts_at) && !empty($request->expires_at)){
                    $now = Carbon::now(); // To get the time/date with Carbon libaray.
                    $expiresAt = Carbon::createFromFormat('Y-m-d H:i:s',$request->expires_at);
                    $startAt = Carbon::createFromFormat('Y-m-d H:i:s',$request->starts_at);
                    if($expiresAt->gt($startAt) == false){
                        return response()->json([
                            'status' => false,
                            'errors' => ['expires_at' => 'Expiry date must be greator than start date']
                        ]);
                    }
                }

                
                $discountCode->code = $request->code;
                $discountCode->name = $request->name;
                $discountCode->description = $request->description;
                $discountCode->max_uses = $request->max_uses;
                $discountCode->max_uses_user = $request->max_uses_user;
                $discountCode->type = $request->type;
                $discountCode->discount_amount = $request->discount_amount;
                $discountCode->min_amount = $request->min_amount;
                $discountCode->status = $request->status;
                $discountCode->starts_at = $request->starts_at;
                $discountCode->expires_at = $request->expires_at;
                //print_r($discountCode); die();
                $discountCode->save();
                $message = 'Discount Coupon Updated successfully';
                session()->flash('success', $message);
                return response()->json([
                    'status' => true,
                    'message' => $message,
                    'data' => $discountCode
                ]);

            }else{
                return response()->json([
                    'status' => false,
                    'errors'  => $validator->errors()
                ]);
            }

        }

        public function destroy(Request $request, $id){
            $discountCode = DiscountCoupon::find($id);
            if($discountCode == null){
                session()->flash('error', 'Discount Coupon not found');
                return response()->json([
                    'status' => true
                ]);           
            }
            $discountCode->delete();
            session()->flash('success', 'Discount Coupon deleted successfully.');
            return response()->json([
                'status' => true
            ]);
        }

        web.php
        Route::post('coupons',[DiscountCodeController::class,'store'])->name('coupons.store');
        Route::get('coupons/{id}/edit',[DiscountCodeController::class,'edit'])->name('coupons.edit');
        Route::put('coupons/{id}',[DiscountCodeController::class,'update'])->name('coupons.update');
        Route::delete('coupons/{id}',[DiscountCodeController::class,'destroy'])->name('coupons.delete');

        view > admin > coupon > edit/list blade


Part :- 35 Checkout Apply discount coupon frontend.
        Check full file for better understanding :- CartController.php, check.blade.php
        checkout.blade.php
        <div class="input-group apply-coupan mt-4">
            <input type="text" placeholder="Coupon Code" class="form-control">
            <button class="btn btn-dark" type="button" id="button-addon2">Apply Coupon</button>
        </div> 
        <div class="d-flex justify-content-between summery-end">
            <div class="h6"><strong>Discount</strong></div>
            <div class="h6"><strong id="discount_value">${{ $discount }}</strong></div>
        </div>
    CartController.php
    public function checkout(){
        $discount = 0;
    }

    public function processCheckout(Request $request){
         if($request->payment_method == 'cod'){
            $discount = 0;
         }

    public function getOrderSummery(Request $request){
         $discount = 0;
        // Apply discount here
        if(session()->has('code')){
            $code = session()->get('code');
            if($code->type == 'percent'){
                $discount = ($code->discount_amount/100)*$subTotal;
            }else{
                $discount = $code->discount_amount;

            }
        }

         if($shippingInfo != null){
                
                $grandTotal = ($subTotal-$discount)+$shippingCharge;
                return response()->json([
                    'status' => true,
                    'grandTotal' => number_format($grandTotal,2),
                    'discount' => $discount,
                    'shippingCharge' => number_format($shippingCharge,2)
                ]);

         }else{
             $grandTotal = ($subTotal-$discount)+$shippingCharge;
                return response()->json([
                    'status' => true,
                    'grandTotal' => number_format($grandTotal,2),
                    'discount' => $discount,
                    'shippingCharge' => number_format($shippingCharge,2)
                ]);
         }else{
            return response()->json([
                'status' => true,
                'grandTotal' => number_format($subTotal-$discount,2),
                'discount' => $discount,
                'shippingCharge' => number_format(0,2)
            ]);  
         }
    }

    checkout.blade.php
    <div class="d-flex justify-content-between summery-end">
        <div class="h6"><strong>Discount</strong></div>
        <div class="h6"><strong>${{ $discount }}</strong></div>
    </div>


    ALTER TABLE `orders` ADD `coupon_code_id` INT NULL DEFAULT NULL AFTER `coupon_code`;

CartController.php
public function applyDiscount(Request $request){
        $code = DiscountCoupon::where('code', $request->code)->first();
        
        if($code == null){
            return response()->json([
                'status' => false,
                'message' => 'Invalid discount coupon'
            ]);
        }

        // Check coupon start date valid or not
        $now = Carbon::now();
       // echo $now->format('Y-m-d H:i:s');

        if($code->starts_at != ''){
            $startDate = Carbon::createFromFormat('Y-m-d H:i:s',$code->starts_at);
            if($now->lt($startDate)){
                return response()->json([
                    'status' => false,
                    'message' => 'Invalid discount coupon'
                ]);
            }
        }

        if($code->expires_at != ''){
            $endDate = Carbon::createFromFormat('Y-m-d H:i:s',$code->expires_at);
            if($now->gt($endDate)){
                return response()->json([
                    'status' => false,
                    'message' => 'Invalid discount coupon end date'
                ]);
            }
        }
        
        session()->put('code', $code);
        return $this->getOrderSummery($request);
    }

    // Remove coupon code from checkout
    public function removeCoupon(Request $request){
        session()->forget('code');
        return $this->getOrderSummery($request);
    }


}

    Checkout.blade.php
    // Apply discount 
        $('#apply_discount').click(function(){
            $.ajax({
                url: '{{ route("front.applyDiscount") }}',
                type: 'post',
                data: {code: $('#discount_code').val(), country_id: $('#country').val()},
                dataType: 'json',
                success: function(response){
                    if(response.status == true){
                        $('#shippingAmount').html('$'+response.shippingCharge);
                        $('#grandTotal').html('$'+response.grandTotal);
                        $('#discount_value').html('$'+response.discount);
                        $('#discount-response-wrapper').html(response.discountString);
                    }
                },
                error: function(error){

                }
            });
        });

        $('body').on('click', '#remove-discount', function(){
            $.ajax({
                url: '{{ route("front.removeCoupon") }}',
                type: 'post',
                data: {country_id: $('#country').val()},
                dataType: 'json',
                success: function(response){
                    if(response.status == true){
                        $('#shippingAmount').html('$'+response.shippingCharge);
                        $('#grandTotal').html('$'+response.grandTotal);
                        $('#discount_value').html('$'+response.discount);
                        $('#discount-response').html('');
                        $('#discount_code').val('');
                    }
                },
                error: function(error){

                }
            });
        });

        web.php
        Route::post('apply-discount',[CartController::class,'applyDiscount'])->name('front.applyDiscount');
        Route::post('remove-discount',[CartController::class,'removeCoupon'])->name('front.removeCoupon');


Part :- 36 Checkout apply discount coupon 2.

    CartController.php
    applyDiscount(){
        $subTotal = Cart::subtotal(2,'.','');
         // Return how many times coupon use
        if($code->max_uses > 0){
            $couponUse = Order::where('coupon_code_id', $code->id)->count();
            if($couponUse >= $code->max_uses){
                return response()->json([
                    'status' => false,
                    'message' => 'Coupon code is access his limit'
                ]);
            }
        }
        
        // Use coupon code how many time user. Max uses user check.
        if($code->max_uses_user > 0){
            $couponUsedByUser = Order::where(['coupon_code_id' => $code->id, 'user_id' => Auth::user()->id])->count();
            if($couponUsedByUser >= $code->max_uses_user){
                return response()->json([
                    'status' => false,
                    'message' => 'You used already this coupon.'
                ]);
            }
        }
        
        // Minimum amount condition check
        if($code->min_amount > 0){
            if($subTotal < $code->min_amount){
                return  response()->json([
                    'status' => false,
                    'message' => 'Your min amount must be $'.$code->min_amount.'.'
                ]);
            }

        }
    }
    checkout.blade.php

    $('#apply_discount').click(function(){
        if(response.status == true){
            $('#shippingAmount').html('$'+response.shippingCharge);
            $('#grandTotal').html('$'+response.grandTotal);
            $('#discount_value').html('$'+response.discount);
            $('#discount-response-wrapper').html(response.discountString);
        }else{
            $('#discount-response-wrapper').html("<span class='text-danger'>"+response.message+"</span>");

        }
    })

Part :- 37 My account orders frontend.
        php artisan make:view front/account/order 
        php artisan make:migration alter_orders_table
        public function up(): void
        {
            Schema::table('orders', function(Blueprint $table){
                $table->enum('payment_status',['paid','not paid'])->after('grand_total')->default('not paid');
                $table->enum('status',['pending','shipped','delivered'])->after('payment_status')->default('pending');
            });
        }

        /**
        * Reverse the migrations.
        */
        public function down(): void
        {
            Schema::table('orders', function(Blueprint $table){
                $table->dropColumn('payment_status');
                $table->dropColumn('status');
            }); 
        }

        php artisan migrate

        CartController.php
        processCheckout(){
            $order = new Order;
            $order->payment_status =  'not paid';
            $order->status =  'pending  ';
        }

        AuthController.php
        public function orders(){
            $user = Auth::user();
            $orders = Order::where('user_id', $user->id)->orderBy('created_at', 'DESC')->get();
            return view('front.account.order',['orders' => $orders]);
        }

        view > front > account > order.blade.php
        php artisan make:view front/account/order-detail

        helper.php
        function getProductImage($productId){
            return Product::where('product_id', $productId)->first();
        }

        AuthController.php
        public function orders(){
            $user = Auth::user();
            $orders = Order::where('user_id', $user->id)->orderBy('created_at', 'DESC')->get();
            return view('front.account.order',['orders' => $orders]);
        }

        public function orderDetail($id){
            $user = Auth::user();
            $data['order'] = Order::where('user_id', $user->id)->where('id', $id)->first();
            $data['orderItems'] = OrderItem::where('order_id',$id)->get();
            return view('front.account.order-detail', $data);
        }

        CartController.php
        public function processCheckout(Request $request){
            $discountCodeId = null;
        }

        view > front > account > order.blade.php
        view > front > account > order-detail.blade.php

        front > layout > app.blade.php
        @if(Auth::check())
            <a href="{{ route('account.profile') }}" class="nav-link text-dark">My Account</a>
        @else
            <a href="{{ route('account.login') }}" class="nav-link text-dark">Login/Register</a>
        @endif

        web.php
        Route::group(['middleware' => 'auth'], function(){
            Route::get('myorders',[AuthController::class,'orders'])->name('account.orders');
            Route::get('order-detail/{id}',[AuthController::class,'orderDetail'])->name('account.orderDetail');
        });

Part :- 38 Admin orders details backend.
        php artisan make:controller Admin/OrderController
        php artisan make:view admin/orders/list
        php artisan make:view admin/orders/detail

        OrderController.php
        public function index(Request $request){
            $orders = Order::latest('orders.created_at')->select('orders.*','users.name','users.email'); // latest function get the records according to created_at column
            $orders = $orders->leftJoin('users', 'users.id', 'orders.user_id');
            if($request->get('keyword') != ''){
                $orders = $orders->where('users.name','like','%'.$request->get('keyword').'%');
                $orders = $orders->orWhere('users.email','like','%'.$request->get('keyword').'%');
                $orders = $orders->orWhere('orders.id','like','%'.$request->get('keyword').'%');
            }
            $orders = $orders->paginate(10);
            $data['orders'] = $orders;
            return view('admin.orders.list', $data);
        }    

        // Admin Order details
        public function detail($orderId){
            $order  =    Order::select('orders.*','countries.name as countryName')
                        ->where('orders.id',$orderId)
                        ->leftJoin('countries','countries.id','orders.country_id')
                        ->first();
            $orderItems = OrderItem::where('order_id', $orderId)->get();
            return view('admin.orders.detail',['order' => $order, 'orderItems' => $orderItems]);
        }

        view > admin/ order/ list.blade.php / detail.blade.php

Part :- 39 Admin Update order status backend.
        ALTER TABLE `orders` CHANGE `status` `status` ENUM('pending','shipped','delivered','cancelled') CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'pending';
        php artisan make:migration alter_orders_table
        public function up(): void
        {
            Schema::table('orders', function(Blueprint $table){
                $table->timestamp('shipped_date')->nullable()->after('status');
            });
        }

        /**
        * Reverse the migrations.
        */
        public function down(): void
        {
            Schema::table('orders', function(Blueprint $table){
                $table->dropColumn('shipped_date');
            });
        }

        php artisan migrate

        Route::post('orders/change-status/{id}',[OrderController::class,'changeOrderStatus'])->name('orders.changeOrderStatus');
        detail.blade.php
        <div class="mb-3">
            <label for="shipped_date"></label>
            <input type="text" name="shipped_date" class="form-control shipped_date" id="shipped_date" value="{{ $order->shipped_date }}">
        </div>
        <script>
            $('document').ready(function(){
                $('#shipped_date').datetimepicker({
                    Format : 'Y m d H:i:s'
                });
            });

            $('#chageOrderStatusForm').submit(function(event){
                event.preventDefault();
                $.ajax({
                    url : '{{ route("orders.changeOrderStatus", $order->id) }}',
                    type : 'post',
                    data : $(this).serializeArray(),
                    dataType : 'json',
                    success : function(response){
                        window.location.href = '{{ route("orders.detail",$order->id) }}';
                    },
                    error : function(jqXHR, exception, error){

                    }
                });
            });
        </script>

        public function changeOrderStatus(Request $request, $orderId){
            $order = Order::find($orderId);
            $order->status = $request->status;
            $order->shipped_date = $request->shipped_date;
            $order->save();
            session()->flash('success', 'Order status Updated successfully');
            return response()->json([
                'status' => true,
                'message' => 'Order status Updated successfully'
            ]);
        }

        order-detail.blade.php
        <time datetime="2019-10-01">
            @if(!empty($order->shipped_date))
                {{ \Carbon\Carbon::parse($order->shipped_date)->format('d M, Y') }}
            @else
                n/a
            @endif
        </time>

        AuthController.php
        public function orderDetail($id){
            $data['orderItemsCount'] = OrderItem::where('order_id',$id)->count();
        }

Part :- 40 Order Send confirmation frontend.
        Use the mail trap for receving the email. Goto the web site and make account. Copy the setting according to laravel.

        

        .env file :-
        MAIL_MAILER=smtp
        MAIL_HOST=sandbox.smtp.mailtrap.io
        MAIL_PORT=2525
        MAIL_USERNAME=a39d6cef78521f
        MAIL_PASSWORD=78905380eb8378

        php artisan make:mail OrderEmail
        Goto the App\Mail\OrderEmail.php
        php artisan make:view email/order

        Helper > helper.php
        function orderEmail($orderId, $userType='customer'){
            $order = Order::where('id', $orderId)->with('items')->first();
            if($userType == 'customer'){
                $subject = 'Thanks for your order';
                $email = $order->email;
            }else{
                $subject = 'You have recieved an order';
                $email = env('ADMIN_MAIL');
            }
            //dd($order);
            $mailData = [
                'subject' => $subject,
                'order' => $order,
                'userType' => $userType
            ];

            Mail::to($email)->send(new OrderEmail($mailData));

        }

        function getCountryInfo($id){
            return Country::where('id', $id)->first();
        }

        Model > Order.php
        // Returns the order items
        public function items(){
            return $this->hasMany(OrderItem::class);
        }

        CartController.php
        public function processCheckout(Request $request){
         // Send Order Email
            orderEmail($order->id);
        }

        OrderEmail.php
        public function __construct($mailData)
        {
            $this->mailData = $mailData;
        }
        public function envelope(): Envelope
        {
            return new Envelope(
                subject: $this->mailData['subject'],
            );
        }
         public function content(): Content
        {
            return new Content(
                view: 'email.order',
            );
        }

        view > email > order.blade.php

Part :- 41 Admin Send Invoice Email Backend.

    email > order.blade.php
    @if($mailData['userType'] == 'customer'){
        <h1>Thanks for you Order!!</h1>
        <h2>Your Order Id is : {{ $mailData['order']->id }}</h2>
    }
    @else
        <h1>You have recevied an order:</h1>
        <h2>Order Id : {{ $mailData['order']->id }}</h2>
    @endif


    ADMIN_MAIL = "admin@admin.com"

    admin > orders > detail.blade.php
    $('#sendInvoiceEmail').submit(function(event){
            event.preventDefault();
           if(confirm('Are you sure you want to send email?')){
                $.ajax({
                    url: '{{ route("orders.sendInvoiceEmail", $order->id) }}',
                    type: 'post',
                    data: $(this).serializeArray(),
                    dataType: 'json',
                    success: function(response){
                        window.location.href = '{{ route("orders.detail",$order->id) }}';
                    },
                    error: function(jqXHR, exception, error){

                    }
                });
           }
        });

        CartController.php
        orderEmail($order->id, 'customer');

        OrderController.php
        public function sendInvoiceEmail(Request $request, $orderId){
            orderEmail($orderId, $request->userType);
            session()->flash('success', 'Order Email send successfully');
            return response()->json([
                'status' => true,
                'message' => 'Order Email send successfully'
            ]);        
        }

        web.php
        // Send Inovice Email
        Route::post('orders/send-email/{id}',[OrderController::class,'sendInvoiceEmail'])->name('orders.sendInvoiceEmail');

Part :- 42 My account wishlist backend.
        php artisan make:migration create_wishlists_table
        
        whishlist_table.php
        Schema::create('wishlists', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->foreignId('product_id')->constrained()->onDelete('cascade');
            $table->timestamps();
        });

        php artisan migrate
        php artisan make:model Wishlist

        FrontController.php
        public function addToWishlist(Request $request){
            if(Auth::check() == false){
                session(['url.intended' => url()->previous()]);
                return response()->json([
                    'status' => false
                ]);
            }
        

        $product = Product::where('id', $request->id)->first();
        if($product == null){
            return response()->json([
                'status' => true,
                'message' => '<div class="alert alert-danger">Product not found</div>'
            ]);
        }
        Wishlist::updateOrCreate(
            // This conditio we check the product is exists or not. This work as where clause.
            [
                'user_id' => Auth::user()->id,
                'product_id' => $request->id
            ],
            // Save or update record.
            [
                'user_id' => Auth::user()->id,
                'product_id' => $request->id
            ]
        );

        /* $wishlist = new Wishlist;
        $wishlist->user_id = Auth::user()->id;
        $wishlist->product_id = $request->id;
        $wishlist->save(); */

        return response()->json([
            'status' => true,
            'message' => '<div class="alert alert-success"><strong>'.$product->title.'</strong> added in your wishlist</div>'
        ]);

        }

        Model > whishlist.php
        public $fillable = ['user_id', 'product_id'];
        // Define Relation
        public function product(){
            return $this->belongsTo(Product::class);
        }
        
        view > front > home.blade.php
        latest Product and feature product
        <a onclick="addToWishlist({{$product->id}})"  class="whishlist" href="javascript:void(0)"><i class="far fa-heart"></i></a>
        view > front > app.blade.php
        <div class="modal fade" id="wishlistModal" tabindex="-1" aria-labelledby="wishlistLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="wishlistLabel">Success</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
                </div>
            </div>
        </div>

        function addToWishlist(id){
            $.ajax({
                url: ' {{ route("front.addToWishlist") }} ',
                type: 'post',
                data: {id: id},
                dataType: 'json',
                success: function(response){
                    if(response.status == true){
                        $('#wishlistModal .modal-body').html(response.message);
                        $('#wishlistModal').modal('show');

                    }else{
                        window.location.href = '{{ route("account.login") }}';
                    }
                },
                error: function(jqXHR, exception, error){

                }
            });
        }
        web.php
        Route::post('add-to-wishlist',[FrontController::class,'addToWishlist'])->name('front.addToWishlist');
        Route::post('remove-product-from-wishlist',[AuthController::class,'removeProductFromWishlist'])->name('account.removeProductFromWishlist');

        php artisan make:view front/account/wishlist
        view front > account > whishlist.blade.php

        AuthController.php
        public function wishList(){
            $data['wishlists'] = Wishlist::where('user_id',Auth::user()->id)->with('product')->get();
            return view('front.account.wishlist', $data);
        }

        public function removeProductFromWishlist(Request $request){
            $wishlist = Wishlist::where('user_id', Auth::user()->id)->where('product_id', $request->id)->first();
            if($wishlist == null){
                session()->flash('error', 'Product already removed');
                return response()->json([
                    'status' => true
                ]);
            }else{
                Wishlist::where('user_id',Auth::user()->id)->where('product_id', $request->id)->delete();
                session()->flash('success', 'Product removed successfully.');
                return response()->json([
                    'status' => true
                ]);
            }
        }

          web.php
        
        
        whishlist.blade.php and check this page.
        <script>
        function removeProduct(id){
            $.ajax({
                url: '{{ route("account.removeProductFromWishlist") }}',
                type: 'post',
                data: {id:id},
                datatype: 'json',
                success: function(response){
                    if(response.status == true){
                        window.location.href = '{{ route("account.wishlist") }}'
                    }
                },
                error: function(error){
                    
                }
            })
        }
    </script>
   


Part :- 43 Inventory stock update backend.
        CartController.php
        processCheckout(){
            // Update product stock.
            $productdata = Product::find($item->id);
            if($productdata->track_qty == 'Yes'){
                $currentQty = $productdata->qty;
                $updatedQty = $currentQty-$item->qty;
                $productdata->qty = $updatedQty;
                $productdata->save();
            } 
        }

        home.blade.php, product.blade.php, shop.blade.php
        // Add this code add to cart button
        @if($product->track_qty == 'Yes')
            @if($product->qty > 0)
                <a class="btn btn-dark" href="javascript:void(0)" onclick="addToCart({{$product->id}})">
                    <i class="fa fa-shopping-cart"></i> Add To Cart
                </a>    
            @else
                <a class="btn btn-dark" href="javascript:void(0)">
                    Out Of Stock
                </a>    
            @endif
        @else
            <a class="btn btn-dark" href="javascript:void(0)" onclick="addToCart({{$product->id}})">
                <i class="fa fa-shopping-cart"></i> Add To Cart
            </a>   
        @endif    

        ShopController.php
        processCheckout(){
            $relatedProducts = Product::whereIn('id',$productArray)->where('status', 1)->with('product_images')->get(); 
        }


Part :- 44 Shop search products frontend.
        view > frontend > layout > app.blade.php
        <form action="{{ route('front.shop') }}" method="get">					
            <div class="input-group">
                <input type="text" name="search" id="search" value="{{ Request::get('search') }}" placeholder="Search For Products" class="form-control" aria-label="Amount (to the nearest dollar)">
                <button type="submit" class="input-group-text">
                    <i class="fa fa-search"></i>
                </button>
            </div>
        </form>

        ShopController.php

         // Search bar in frontend navigation menu
        public function index(Request $request, $categorySlug = null, $subCategroy = null){ 
            if(!empty($request->get('search'))){
                $products = $products->where('title','like','%'.$request->get('search').'%');
            }
        }

        shop.blade.php
        // Search bar in frontend navigation menu
        var keyword = $('#search').val();
        if(keyword.length > 0){
            url += '&search='+keyword;   
        }

Part :- 45 My Account update profile frontend.
        AuthController.php
        public function profile(){
            $userId = Auth::user()->id;
            $user = User::where('id', $userId)->first();
            $customerAddress = CustomerAddress::where('user_id',$userId)->first();
            $countries = Country::orderBy('name', 'ASC')->get();
            return view('front.account.profile', ['userData' => $user, 'countries' => $countries, 'customerAddress' => $customerAddress]);
        }

        public function updateAddress(Request $request){
            $userId = Auth::user()->id;
            
            $validator = Validator::make($request->all(),[
                'first_name' => 'required|min:5',
                'last_name' => 'required',
                'email' => 'required|email',
                'country' => 'required',
                'address' => 'required',
                'city' => 'required',
                'state' => 'required',
                'zip' => 'required',
                'mobile' => 'required'
            ]);
            if($validator->passes()){
            /*   $user = User::find($userId);
                $user->name = $request->name;
                $user->email = $request->email;
                $user->phone = $request->phone;
                $user->save(); */

                CustomerAddress::updateOrCreate(
                    // First we check data is exists
                    ['user_id' => $userId],
                    // Store or Update data
                    [ 
                        'user_id' => $userId,
                        'first_name' => $request->first_name,
                        'last_name' => $request->last_name,
                        'email' => $request->email,
                        'mobile' => $request->mobile,
                        'country_id' => $request->country,
                        'address' => $request->address,
                        'apartment' => $request->apartment,
                        'city' => $request->city,
                        'state' => $request->state,
                        'zip' => $request->zip
                    ]            
                );
            
                session()->flash('success', 'Address updated successfully.');
                return response()->json([
                    'status' => true,
                    'message' => 'Address details is updated successfully'
                ]);
            }else{
                return response()->json([
                    'status' => false,
                    'errors' => $validator->errors()
                ]);
            }
        }

        web.php
        Route::post('update-address',[AuthController::class,'updateAddress'])->name('account.updateAddress');

        view > front > account > profile.blade.php


Part :- 46 User listing create backend.
        php artisan make:migration alter_users_table
        php artisan migrate
        php artisan make:controller Admin/UserController
        php artisan make:view admin/users/list
        php artisan make:view admin/users/create

        UserController.php
        public function index(Request $request){
        $users = User::latest('created_at');
        if(!empty($request->get('keyword'))){
            $users = $users->whereAny(['name', 'phone'],'like','%'.$request->get('keyword').'%');
        }
        //$users = $users->get();
        $users = $users->paginate(10);
        return view('admin.users.list', ['users' => $users]);
    }

    public function create(Request $request){
        return view('admin.users.create');
    }

    public function store(Request $request){
        $validator = Validator::make($request->all(),[
            'name' => 'required',
            'password' => 'required|min:5',
            'email' => 'required|email|unique:users',
            'phone' => 'required'
        ]);
        if($validator->passes()){
            $user = new User;
            $user->name = $request->name;
            $user->email = $request->email;
            $user->password = Hash::make($request->password);
            $user->phone = $request->phone;
            $user->status = $request->status;
            $user->save();
            session()->flash('success', 'User added succssfully');
            return response()->json([
                'status' => true,
                'message' => 'New user added successfully;'
            ]);
        }else{
            return response()->json([
                'status' => false,
                'errors' => $validator->errors()
            ]);
        }
    }

    view > admin > users > 
    // create.blade.php
        <script>
            $('#usersForm').submit(function(event){
                event.preventDefault();
                $("button[type=submit]").prop('disabled', true);
                $.ajax({
                    url: '{{ route("users.store") }}',
                    type: 'post',
                    data: $(this).serializeArray(),
                    dataType: 'json',
                    success: function(response){
                        $("button[type=submit]").prop('disabled', false);
                        if(response.status == true){
                            window.location.href = "{{ route('users.index') }}";
                            $('#name').removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html();
                            $("#email").removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html();
                            $("#password").removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html();
                            $("#phone").removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html();
                        }else{
                            var errors = response.errors;
                            if(errors.name){
                                $('#name').addClass('is-invalid').siblings('p').addClass('invalid-feedback').html(errors.name);
                            }else{
                                $('#name').removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html();
                            }
                            if(errors.email){
                                $("#email").addClass('is-invalid').siblings('p').addClass('invalid-feedback').html(errors.email);
                            }else{
                                $("#email").removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html();
                            }
                            if(errors.password){
                                $("#password").addClass('is-invalid').siblings('p').addClass('invalid-feedback').html(errors.password);
                            }else{
                                $("#password").removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html();
                            }
                            if(errors.phone){
                                $("#phone").addClass('is-invalid').siblings('p').addClass('invalid-feedback').html(errors.phone);
                            }else{
                                $("#phone").removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html();
                            }
                        }

                    },
                    error: function(jqXHR, exception, error){

                    }
                });
            });
        </script>
    
     / list.blade.php

    web.php

    // Users Routes
    Route::get('users',[UserController::class,'index'])->name('users.index');
    Route::get('users/create',[UserController::class,'create'])->name('users.create');
    Route::post('users',[UserController::class,'store'])->name('users.store');

Part :- 47 User edit delete backend.
        php artisan make:view admin/users/edit

        UserController.php
        public function edit(Request $request, $id){
            $user = User::find($id);
            if($user == null){
                session()->flash('error', 'User not found.');
                return redirect()->route('users.index')->with('User not found.');
            }
            return view('admin.users.edit',['user' => $user]);
        }

        public function update(Request $request, $id){
            $user = User::find($id);
            if($user == null){
                session()->flash('error', 'User not found.');
            return response()->json([
                'status' => true,
                'message' => 'User not found.'
            ]);
            }
            $validator = Validator::make($request->all(),[
                'name' => 'required',
                'email' => 'required|email|unique:users,email,'.$id.',id',
                'phone' => 'required',
            ]);
            if($validator->passes()){
                $user->name = $request->name;
                $user->email = $request->email;
                if($request->password != ''){
                    $user->password = Hash::make($request->password);
                }
                $user->phone = $request->phone;
                $user->status = $request->status;
                $user->save();
                session()->flash('success', 'User Update succssfully');
                return response()->json([
                    'status' => true,
                    'message' => 'User Update successfully;'
                ]);
            }else{
                return response()->json([
                    'status' => false,
                    'errors' => $validator->errors()
                ]);
            }
        }

        function destroy(Request $request, $id){
            $user = User::find($id);
            if(empty($user)){
                session()->flash('error', 'User not found.');
                return response()->json([
                    'status' => true,
                    'message' => 'User not found.'
                ]);
            }
        
            $user->delete();
            session()->flash('success', 'User deleted succssfully.');
            return response()->json([
                'status' => true,
                'message' => 'User deleted successfully.'
            ]);
        }

        web.php
        Route::get('users/{id}/edit',[UserController::class,'edit'])->name('users.edit');
        Route::put('users/{id}',[UserController::class,'update'])->name('users.update');
        Route::delete('users/{id}',[UserController::class,'destroy'])->name('users.destroy');

        view > admin > users > edit.blade.php / list.blade.php check this both files.

Part :- 48 Static page create list backend.
        php artisan make:migration create_pages_table

        migration > pages_table.php
        public function up(): void
        {
            Schema::create('pages', function (Blueprint $table) {
                $table->id();
                $table->string('name');
                $table->string('slug');
                $table->text('content')->nullable();
                $table->timestamps();
            });
        }

        php artisan migrate

        php artisan make:controller Admin/PageController
        php artisan make:model Page

        php artisan make:view admin/pages/create
        php artisan make:view admin/pages/list

        PageController.php
        public function index(Request $request){
            $pages =  Page::latest();
            if($request->keyword != ''){
                $pages = $pages->where('name','like','%'.$request->keyword.'%');
            }
            $pages = $pages->paginate(1);
            return view('admin.pages.list', ['pages' => $pages]);
        }

        public function create(Request $request){
            return view('admin.pages.create');
        }

        public function store(Request $request){
            $validator = Validator::make($request->all(),[
                'name' => "required",
                'slug' => 'required'
            ]);
            if($validator->passes()){
                $pages =new Page;
                $pages->name = $request->name;
                $pages->slug = $request->slug;
                $pages->content = $request->content;
                $pages->save();

                session()->flash('success', 'Pages created successfully');
                return response()->json([
                    'status' => true,
                    'message' => "Page created successfully."
                ]);
            }else{
                return response()->json([
                    'status' => false,
                    'errors' => $validator->errors()
                ]);
            }
        }

        view > admin > pages > create.blade.php
        <script>
            $('#pageForm').submit(function(event){
                event.preventDefault();
                $('button[type="submit"]').prop('disabled', true);
                $.ajax({
                    url : "{{ route('pages.store') }}",
                    type : "post",
                    data : $(this).serializeArray(),
                    dataType : "json",
                    success : function(response){
                        $("button[type=submit]").prop('disabled',false);
                        if(response['status'] == true){
                            $('#name').removeClass('is-invalid').siblings("p").removeClass('invalid-feedback').html();
                            $('#slug').removeClass('is-invalid').siblings("p").removeClass('invalid-feedback').html();
                            window.location.href = "{{ route('pages.index') }}"
                        }else{
                            var errors = response['errors'];
                            if(errors['name']){
                                $('#name').addClass('is-invalid').siblings("p").addClass('invalid-feedback').html(errors['name']);
                            }else{
                                $('#name').removeClass('is-invalid').siblings("p").removeClass('invalid-feedback').html();
                            }
                            if(errors['slug']){
                                $('#slug').addClass('is-invalid').siblings("p").addClass('invalid-feedback').html(errors['slug']);
                            }else{
                                $('#slug').removeClass('is-invalid').siblings("p").removeClass('invalid-feedback').html();
                            }
                        }
                    },
                    error : function(jqXHR, exception, error){
                        console.log('Error = '+ error);
                    }
                });
            });

            $("#name").change(function(event){
                event.preventDefault();
                element = $(this);
                $('button[type="submit"]').prop('disabled', true);
                $.ajax({
                    url : "{{ route('getSlug') }}",
                    type : 'get',
                    data : {title : element.val()},
                    dataType : 'json',
                    success : function(response){
                        if(response['status'] == true){
                            $('#slug').val(response['slug']);
                        }
                    }
                });
            })
        </script>

        view > admin > pages > list.blade.php
        
        web.php
        // Pages
        Route::get('pages',[PageController::class,'index'])->name('pages.index');
        Route::get('pages/create', [PageController::class,'create'])->name('pages.create');
        Route::post('pages', [PageController::class,'store'])->name('pages.store');
        Route::get('pages/{id}/edit',[PageController::class,'edit'])->name('pages.edit');

Part :- 49 Static page edit, delete backend.
        php artisan make:view admin/pages/edit
        
        web.php
        Route::put('pages/{id}',[PageController::class,'update'])->name('pages.update');
        Route::delete('pages/{id}',[PageController::class,'destroy'])->name('pages.destroy');

        admin > pages > edit.blade.php
        <script>
            $('#pageForm').submit(function(event){
                event.preventDefault();
                $('button[type="submit"]').prop('disabled', true);
                $.ajax({
                    url : "{{ route('pages.update', $page->id) }}",
                    type : "put",
                    data : $(this).serializeArray(),
                    dataType : "json",
                    success : function(response){
                        $("button[type=submit]").prop('disabled',false);
                        if(response['status'] == true){
                            $('#name').removeClass('is-invalid').siblings("p").removeClass('invalid-feedback').html();
                            $('#slug').removeClass('is-invalid').siblings("p").removeClass('invalid-feedback').html();
                            window.location.href = "{{ route('pages.index') }}"
                        }else{
                            var errors = response['errors'];
                            if(errors['name']){
                                $('#name').addClass('is-invalid').siblings("p").addClass('invalid-feedback').html(errors['name']);
                            }else{
                                $('#name').removeClass('is-invalid').siblings("p").removeClass('invalid-feedback').html();
                            }
                            if(errors['slug']){
                                $('#slug').addClass('is-invalid').siblings("p").addClass('invalid-feedback').html(errors['slug']);
                            }else{
                                $('#slug').removeClass('is-invalid').siblings("p").removeClass('invalid-feedback').html();
                            }
                        }
                    },
                    error : function(jqXHR, exception, error){
                        console.log('Error = '+ error);
                    }
                });
            });

            $("#name").change(function(event){
                event.preventDefault();
                element = $(this);
                $('button[type="submit"]').prop('disabled', true);
                $.ajax({
                    url : "{{ route('getSlug') }}",
                    type : 'get',
                    data : {title : element.val()},
                    dataType : 'json',
                    success : function(response){
                        if(response['status'] == true){
                            $('#slug').val(response['slug']);
                        }
                    }
                });
            })
        </script>

        admin > pages > list.blade.php

        <script>
            function deletePage(id){
                let url = "{{ route('pages.destroy', 'id') }}";
                let newUrl = url.replace('id', id);
                if(confirm("Are you want to delete page")){
                    $.ajax({
                        url : newUrl,
                        type : 'delete',
                        data : {},
                        dataType : 'json',
                        headers : {
                            "X-CSRF-TOKEN" : $("meta[name='csrf-token']").attr('content')
                        },
                        success : function(response){
                            if(response['status'] == true){
                                window.location.href = "{{ route('pages.index') }}"
                            }
                        },
                        error : function(jqXHR, exception, error){
                            
                        }
                    })
                }
            }
        </script>

        PageController.php
        public function edit($id){
            $page = Page::find($id);
            if(empty($page)){
                session()->flash('error', 'Page not found');
                return redirect()->route('pages.index')->with('Page not found');
            }
            return view('admin.pages.edit', ['page' => $page]);
        }

        public function update(Request $request, $id){
            $page = Page::find($id);
            if($page == null){
                session()->flash('error', 'Page not found.');
                return response()->json([
                    'status' => true
                ]);
            }
            $validator = Validator::make($request->all(), [
                'name' => 'required',
                'slug' => 'required|unique:pages,slug,'.$page->id.',id'
            ]);

            if($validator->fails()){
                return response()->json([
                    'status' => false,
                    'errors' => $validator->errors()
                ]);
            }else{
                $page->name = $request->name;
                $page->slug = $request->slug;
                $page->content = $request->content;
                $page->save();
                session()->flash('success', "Page updated successfully.");
                return response()->json([
                    'status' => true,
                    'message' => 'Page updated successfully'
                ]);
            }
        }

        public function destroy($id){
            $page = Page::find($id);
            if(empty($page)){
                session()->flash('error', 'Record not found.');
                return response()->json([
                    'status' => true,
                ]);
            }
            $page->delete();
            session()->flash('success', 'Page deleted successfully.');
            return response()->json([
                'status' => true,
                'message' => 'Page deleted successfully.'
            ]);
            
        }


Part :- 50 Show static page frontend.
        php artisan make:view front/page
    
        web.php
        Route::get('page/{slug}', [FrontController::class,'page'])->name('front.page');

        helper.php
        // Return the pages from backend and showing into the frontend.
        function staticPages(){
            $pages = Page::orderBy('name', 'ASC')->get();
            return $pages;
        }

        front > layout > app.blade.php
        footer section 
        <div class="col-md-4">
            <div class="footer-card">
                <h3>Important Links</h3>
                <ul>
                    @if(staticPages()->isNotEmpty())
                        @foreach(staticPages() as $page)
                            <li><a href="{{ route('front.page',$page->slug) }}" title="{{ $page->name }}">{{ $page->name }}</a></li>
                        @endforeach
                    @endif
                </ul>
            </div>
        </div>

        front > page.blade.php :- Check this page.

        FrontController.php

        // Show the admin page in frontend.

        public function page($slug){
            $page = Page::where('slug',$slug)->first();
            if($page == null){
                abort(404);
            }
            return view('front.page', ['page' => $page]);
        }

Part :- 51 My account change password frontend.
        php artisan make:view front/account/change-password

        front > common > sidebar.blade.php
        <a href="{{ route('account.changePassword') }}"  class="nav-link font-weight-bold" role="tab" aria-controls="tab-register" aria-expanded="false"><i class="fas fa-lock"></i> Change Password</a>

        AuthController.php
            public function showChangePasswordForm(){
                return view('front.account.change-password');
            }

            public function changePassword(Request $request){
                $validator = Validator::make($request->all(),[
                    'old_password' => 'required',
                    'new_password' => 'required|min:5',
                    'confirm_password' => 'required|same:new_password',
                ]);

                if($validator->fails()){
                    return response()->json([
                        'status' => false,
                        'errors' => $validator->errors()
                    ]);
                }else{
                    $user = User::select('id','password')->where('id', Auth::user()->id)->first();
                    if(!Hash::check($request->old_password, $user->password)){
                        session()->flash('error', 'Your old password is incorrect, Please try again.');
                        return response()->json([
                            'status' => true
                        ]);
                    }
                    User::where('id', $user->id)->update([
                        'password' => Hash::make($request->new_password)
                    ]);

                    session()->flash('success', 'Your have succssfully changed your password.');
                    return response()->json([
                        'status' => true,
                    ]);

                }
            }

            view > front > account > change-password.blade.php
            <script type="text/javascript">
                $("#changePasswordForm").submit(function(event){
                    event.preventDefault();
                    $('button[type="submit"]').prop('disabled', true);
                    $.ajax({
                        url : "{{ route('account.proccessChangePassword') }}",
                        type : 'post',
                        data : $(this).serializeArray(),
                        dataType : 'json',
                        success : function(response){
                            if(response.status == false){
                                var errors = response.errors;
                                if(errors.old_password){
                                    $("#old_password").addClass('is-invalid').siblings('p').addClass('invalid-feedback').html(errors.old_password);
                                }else{
                                    $("#old_password").removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html();
                                }
                                if(errors.new_password){
                                    $("#new_password").addClass('is-invalid').siblings('p').addClass('invalid-feedback').html(errors.new_password);
                                }else{
                                    $("#new_password").removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html();
                                }
                                if(errors.confirm_password){
                                    $("#confirm_password").addClass('is-invalid').siblings('p').addClass('invalid-feedback').html(errors.confirm_password);
                                }else{
                                    $("#confirm_password").removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html();
                                }
                            }else{
                                $("#old_password").removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html();
                                $("#new_password").removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html();
                                $("#confirm_password").removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html();
                                $('button[type="submit"]').prop('disabled', false);
                                window.location.href = "{{ route('account.changePassword') }}";
                            }
                        },
                        error : function(jqXHR, exception, error){

                        }
                    });
                });
            </script>

    web.php
    Route::get('change-password',[AuthController::class,'showChangePasswordForm'])->name('account.changePassword');
    Route::post('proccess-change-password',[AuthController::class,'changePassword'])->name('account.proccessChangePassword');


Part :- 52 Admin change password backend.
    php artisan make:controller Admin/SettingController
    php artisan make:view admin/change-password

    SettingController.php
     public function showChangePasswordForm(){
        return view('admin.change-password');
    }

    public function processChangePassword(Request $request){
        $validation = Validator::make($request->all(), [
            'old_password' => 'required',
            'new_password' => 'required|min:5',
            'confirm_password' => 'required|same:new_password',
        ]);
        $id = Auth::guard('admin')->user()->id;
        $admin = User::where('id', $id)->first();
        if($validation->passes()){
            if(!Hash::check($request->old_password, $admin->password)){
                session()->flash('error', 'Your old password is incorrect, Please try again.');
                return response()->json([
                    'status' => true
                ]);
            }
        User::where('id', $id)->update([
            'password' => Hash::make($request->new_password)
        ]);
        session()->flash('success', 'You have successfully changed your password.');
        return response()->json([
            'status' => true
        ]);
        }else{
            return response()->json([
                'status' => false,
                'errors' => $validation->errors()
            ]);
        }
    }

    web.php
    Route::get('change-password',[SettingController::class,'showChangePasswordForm'])->name('admin.showChangePasswordForm');
    Route::post('process-change-password',[SettingController::class,'processChangePassword'])->name('admin.processChangePassword');

    admin > change-password.blade.php
    <script>
        $('#changePasswordForm').submit(function(event){
            event.preventDefault();
            var element = $(this);
                // For disabled after the submit buttton
            $("button[type=submit]").prop('disabled',true);
            $.ajax({
                url : '{{ route("admin.processChangePassword") }}',
                type : 'post',
                data : element.serializeArray(),
                dataType : 'json',
                success: function(response){
                    // For disabled after the submit buttton
                    $("button[type=submit]").prop('disabled',false);
                    if(response['status'] == true){
                        $('#old_password').removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html("");
                        $('#new_password').removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html(""); 
                        $('#confirm_password').removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html(""); 
                        window.location.href = "{{ route('admin.showChangePasswordForm') }}";
                    }else{
                        var errors = response['errors'];
                        if(errors['old_password']){
                            $('#old_password').addClass('is-invalid').siblings('p').addClass('invalid-feedback').html(errors['old_password']);
                        }else{
                            $('#old_password').removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html("");
                        }
                        if(errors['new_password']){
                            $('#new_password').addClass('is-invalid').siblings('p').addClass('invalid-feedback').html(errors['new_password']);
                        }else{
                            $('#new_password').removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html("");
                        }
                        if(errors['confirm_password']){
                            $('#confirm_password').addClass('is-invalid').siblings('p').addClass('invalid-feedback').html(errors['confirm_password']);
                        }else{
                            $('#confirm_password').removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html("");
                        }
                    }
                },
                error: function(jqXHR, exception){
                    console.log("Something went wrong");
                }

            });
        });
    </script>

Part :- 53 Page contact us frontend.
        php artisan make:mail ContactEmail  
        php artisan make:view email/contact
        Email > ContactEmail.php
        public $mailData;
        public function __construct($mailData)
        {
            $this->mailData = $mailData;
        }

        /**
        * Get the message envelope.
        */
        public function envelope(): Envelope
        {
            return new Envelope(
                subject: $this->mailData['mail_subject'],
            );
        }

        /**
        * Get the message content definition.
        */
        public function content(): Content
        {
            return new Content(
                view: 'email.contact',
            );
        }
        web.php
        Route::post('send-contact-email',[FrontController::class,'sendContactEmail'])->name('front.sendContactEmail');

        

        front > page.blade.php
        <script>
            $('#contactForm').submit(function(event){
                event.preventDefault();
                $('button[type="submit"]').prop('disabled', true);
                $.ajax({
                    url : "{{ route('front.sendContactEmail') }}",
                    type : 'post',
                    data : $(this).serializeArray(),
                    dataType : 'json',
                    success : function(response){
                        var errors = response.errors;
                    $('Button[type="submit"]').prop('disabled', false);
                    if(response.status == false){
                            if(errors.name){
                                $("#name").addClass('is-invalid').siblings('p').addClass('invalid-feedback').html(errors.name);
                            }else{
                                $("#name").removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html('');
                            }
                            if(errors.email){
                                $("#email").addClass('is-invalid').siblings('p').addClass('invalid-feedback').html(errors.email);
                            }else{
                                $("#email").removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html('');
                            }
                            if(errors.subject){
                                $("#subject").addClass('is-invalid').siblings('p').addClass('invalid-feedback').html(errors.subject);
                            }else{
                                $("#subject").removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html('');
                            }
                    }else{
                            window.location.href = '{{ route("front.page",$page->slug) }}';
                    }
                    },
                    error : function(jqXHR, exception, error){

                    }
                });
            });
        </script>

        FrontController.php
        public function sendContactEmail(Request $request){
            $validator = Validator::make($request->all(),[
                'name' => 'required',
                'email' => 'required|email',
                'subject' => 'required|min:5',
            ]);
            if($validator->fails()){
                return response()->json([
                    'status' => false,
                    'errors' => $validator->errors()
                ]);
            }else{
                // Send Email here
                $mailData = [
                    'name' => $request->name,
                    'email' => $request->email,
                    'subject' => $request->subject,
                    'message' => $request->message,
                    'mail_subject' => "You have received a contact email",
                ];
                $admin = User::where('id', 1)->first();
                Mail::to($admin->email)->send(new ContactEmail($mailData));
                session()->flash('success', 'Thanks for contacting us. We will get back to you soon.');
                return response()->json([
                    'status' => true,
                    'errors' => 'Email send'
                ]);
            }
        }

Part :- 54 Account forgot password frontend.
        php artisan make:view front/account/forgot-password
        php artisan make:mail ResetPasswordEmail
        php artisan make:view email/reset-Password
        use Illuminate\Support\Str; 
        php artisan make:view front/account/reset-password

        web.php
        /****************** Forgot Password *****************/
        Route::get('forgot-password',[AuthController::class,'forgotPassword'])->name('front.forgotPassword');
        Route::post('proccess-forgot-password',[AuthController::class,'proccessForgotPassword'])->name('front.proccessForgotPassword');
        Route::get('reset-password/{token}',[AuthController::class,'resetPassword'])->name('front.resetPassword');
        Route::post('process-reset-password',[AuthController::class,'processResetPassword'])->name('front.processResetPassword');

        AuthController.php
        public function forgotPassword(){
            return view('front.account.forgot-password');
        }

        public function proccessForgotPassword(Request $request){
            $validator = Validator::make($request->all(),[
                'email' => 'required|email|exists:users,email'
            ]);
            if($validator->fails()){
                return redirect()->route('front.forgotPassword')->withInput()->withErrors($validator);
            }

            $token = Str::random(60);

            // if the record is exists in table. then first we delete it.
            DB::table('password_reset_tokens')->where('email', $request->email)->delete();

            DB::table('password_reset_tokens')->insert([
                'email' => $request->email,
                'token' => $token,
                'created_at' => now()
            ]);

            // Send Email here
            $user = User::where('email', $request->email)->first();
            $formData = [
                'token' => $token,
                'user' => $user,
                'mailSubject' => 'You have requested to reset your password'
            ];
            Mail::to($request->email)->send(new ResetPasswordEmail($formData));
            return redirect()->route('front.forgotPassword')->with('success', 'Please check your inbox to reset your password.');
        }

        public function resetPassword($token){
            $tokenExists = DB::table('password_reset_tokens')->where('token', $token)->first();
            if($tokenExists == null){
                return redirect()->route('front.forgotPassword')->with('error', 'Invalid request');
            }
            return view('front.account.reset-password', ['token' => $token]);
        }

        public function processResetPassword(Request $request){
            $token = $request->token;
            $tokenObject = DB::table('password_reset_tokens')->where('token', $token)->first();
            if($tokenObject == null){
                return redirect()->route('front.forgotPassword')->with('error', 'Invalid request');
            }

            $user = User::where('email', $tokenObject->email)->first();
            $validator = Validator::make($request->all(),[
                'new_password' => 'required|min:5',
                'confirm_password' => 'required|same:new_password'
            ]);
            if($validator->fails()){
                return redirect()->route('front.resetPassword', $token)->withErrors($validator);
            }

            User::where('id', $user->id)->update([
                'password' => Hash::make($request->new_password)
            ]);

            DB::table('password_reset_tokens')->where('email', $user->email)->delete();
    
            return redirect()->route('account.login')->with('success', 'You have successfully updated your password');
        }

        view > front > account > forgot-password.blade.php/reset-password.blade.php check this files.

        view > email > reset-password.blade.php

        Http > Email > ResetPasswordEmail.php

        public $formData;
        public function __construct($formData)
        {
            $this->formData = $formData;
        }

        /**
        * Get the message envelope.
        */
        public function envelope(): Envelope
        {
            return new Envelope(
                subject: $this->formData['mailSubject'],
            );
        }

        /**
        * Get the message content definition.
        */
        public function content(): Content
        {
            return new Content(
                view: 'email.reset-password',
            );
        }


Part :- 55 Admin dashboard backend.
   Admin > HomeController.php
        public function index(){
            $data['totalOrders'] = Order::where('status','!=','cancelled')->count();
            $data['totalProducts'] = Product::count();
            $data['totalCustomers'] = User::where('role', 1)->count();
            // Total Revenue
            $data['totalRevenue'] = Order::where('status','!=','cancelled')->sum('grand_total');
            // This month Revenue
            $startOfMonth = Carbon::now()->startOfMonth()->format('Y-m-d');
            $currentDate = Carbon::now()->format('Y-m-d');
            $data['revenueThisMonth'] = Order::where('status','!=','cancelled')
                                    ->whereDate('created_at','>=',$startOfMonth)
                                    ->whereDate('created_at','<=',$currentDate)
                                    ->sum('grand_total');
            // Last month Revenue
            $lastMonthStartDate = Carbon::now()->subMonth()->startOfMonth()->format('Y-m-d');
            $lastMonthEndDate = Carbon::now()->subMonth()->endOfMonth()->format('Y-m-d');
            $data['lastMonthName'] = Carbon::now()->subDays(30)->format('M');
            $data['revenueLastMonth'] = Order::where('status','!=','cancelled')
                                        ->whereDate('created_at','>=', $lastMonthStartDate)
                                        ->whereDate('created_at','<=', $lastMonthEndDate)
                                        ->sum('grand_total');
                                

            // Last 30 days Revenue
            $lastThirtyDaysStartDate = Carbon::now()->subDays(30)->format('Y-m-d');
            $data['revenueLastThirtyDays'] = Order::where('status','!=','cancelled')
                                        ->whereDate('created_at','>=', $lastThirtyDaysStartDate)
                                        ->whereDate('created_at','<=', $currentDate)
                                        ->sum('grand_total');


        /*  $admin = Auth::guard('admin')->user();
            echo "Welcome :- ".$admin->name.'<a href="'.route('admin.logout').'">Logout</a>'; */
            return view('admin.dashboard', $data);
        }
       
       view > admin > dashboard.blade.php

Part :- 56 Product leave rating frontend.
    php artisan make:migration create_product_ratings_table 
    migration > product_ratings.php
    public function up(): void
    {
        Schema::create('product_ratings', function (Blueprint $table) {
            $table->id();
            $table->foreignId('product_id')->constrained()->onDelete('cascade');  
            $table->string('username');
            $table->string('email');
            $table->string('comment');
            $table->double('rating',3,2);
            $table->integer('status')->default(0);
            $table->timestamps();
        });
    }

    php artisan make:model ProductRating
    php artisan migrate 

    Open the file part56 form frontend template folder and copy the css.
    Goto public > front-assets > slick.css and past all the css here.

    Copy the HTML form part56 file and open the view > front > product.blade.php
    file and past all the html.

    web.php
    Route::post('save-rating/{productId}',[ShopController::class,'saveRating'])->name('front.saveRating');

    ShopController.php
    public function saveRating(Request $request, $id){
            $validation = Validator::make($request->all(),[
                'name' => 'required',
                'email' => 'required|email',
                'comment' => 'required|min:10',
                'rating' => 'required'
            ]);

            if($validation->fails()){
                return response()->json([
                    'status' => false,
                    'errors' => $validation->errors()
                ]);
            }else{
                $countEmail = ProductRating::where('email', $request->email)->count();
                if($countEmail > 0){
                    session()->flash('error', 'You already rated this product');
                    return response()->json([
                        'status' => true,
                    ]);
                }
                $productRating = new ProductRating;
                $productRating->product_id = $id;
                $productRating->username = $request->name;
                $productRating->email = $request->email;
                $productRating->comment = $request->comment;
                $productRating->rating = $request->rating;
                $productRating->status = 0;
                $productRating->save();
                session()->flash('success', 'Thanks for your rating');
                return response()->json([
                    'status' => true,
                    'message' => 'Thanks for your rating'
                ]);
            }
        }

         view > front > product.blade.php
        <script type="text/javascript">
            $('#productRatingForm').submit(function(event){
                event.preventDefault();
                $.ajax({
                    url : '{{ route("front.saveRating",$product->id) }}',
                    type : 'post',
                    data : $(this).serializeArray(),
                    dataType : 'json',
                    success : function(response){
                        var errors = response.errors;
                        if(response.status == false){
                            if(errors.name){
                                $('#name').addClass('is-invalid').siblings('p').addClass('invalid-feedback').html(errors.name);
                            }else{
                                $('#name').removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html();
                            }
                            if(errors.email){
                                $('#email').addClass('is-invalid').siblings('p').addClass('invalid-feedback').html(errors.email);
                            }else{
                                $('#email').removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html();
                            }
                            if(errors.comment){
                                $('#comment').addClass('is-invalid').siblings('p').addClass('invalid-feedback').html(errors.comment);
                            }else{
                                $('#comment').removeClass('is-invalid').siblings('p').removeClass('invalid-feedback').html();
                            }
                            if(errors.rating){
                                $('.product-rating-error').html(errors.rating);
                            }else{
                                $('.product-rating-error').html('');
                            }
                        }else{
                            window.location.href = "{{ route('front.product',$product->slug) }}";
                        }
                    }
                });
            });
        </script>

Part :- 57 Product Rating show frontend.
        Model > Product.php
        // Rating relation.
        public function product_ratings(){
            return $this->hasMany(ProductRating::class)->where('status',1);
        }
        
        ShopController.php
        public function product(Request $request, $slug){
        $product =  Product::where('slug', $slug)
                    ->withCount('product_ratings')
                    ->withSum('product_ratings', 'rating')
                    ->with(['product_images','product_ratings'])
                    ->first();
        
        
        // Rating Calculation
        $avgRating = '0.00';
        if($product->product_ratings_count > 0){
            $avgRating = number_format(($product->product_ratings_sum_rating/$product->product_ratings_count),2);
        }
        $data['avgRating'] = $avgRating;


        }

        front > product.blade.php check the review section


Part :- 58 Admin approve rating frontend.
    php artisan make:view admin/products/ratings

    admin > layouts > sidebar.blade.php
    <li class="nav-item">
        <a href="{{route('products.productRatings')}}" class="nav-link">
            <i class="nav-icon fa fa-star"></i>
            <p>Ratings</p>
        </a>
    </li>

    admin > products > ratings.blade.php
        <script>
            function deleteProduct(id){
            /*  alert(id);
                return false; */
                let url = '{{ route("products.delete", "id") }}';
                let newUrl = url.replace('id', id);
                /* alert(url);
                return false; */
                if(confirm("Are you sure you want to delete product.")){
                    $.ajax({
                        url : newUrl,
                        type : 'delete',
                        data : {},
                        dataType : 'json',
                        headers : {
                            'X-CSRF-TOKEN' : $('meta[name="csrf-token"]').attr('content')
                        },
                        success : function(response){
                            if(response['status'] == true){
                                //console.log(response);
                                window.location.href = '{{route("products.index")}}';               
                            }else{
                                window.location.href = '{{route("products.index")}}';
                            }
                        },
                        error : function(jqXHR, exception){
                            console.log('Something went wrong');
                            
                        }

                    });
                }
            }

            function changeStatus(status, id){
                if(confirm("Are you sure you want to change status")){
                    $.ajax({
                        url : '{{ route("products.changeRatingStatus") }}',
                        type : 'get',
                        data : {id:id, status:status},
                        dataType : 'json',
                        success : function(response){
                        window.location.href = "{{ route('products.productRatings') }}";
                        }
                    });

                }
            }
        </script>

     ProductController.php
        // Product Rating section
        public function productRatings(Request $request){
            $ratings = ProductRating::select('product_ratings.*','products.title as productTitle')->orderBy('product_ratings.created_at', 'DESC');
            $ratings = $ratings->leftJoin('products', 'products.id','product_ratings.product_id');
            if($request->get('keyword')){
                $ratings = $ratings->orWhere('products.title','like','%'.$request->keyword.'%');
                $ratings = $ratings->orWhere('product_ratings.username','like','%'.$request->keyword.'%');
            }
            $ratings = $ratings->paginate(10);
            return view('admin.products.ratings', ['ratings' => $ratings]);
        }

        public function changeRatingStatus(Request $request){
            $productRating = ProductRating::find($request->id);
            $productRating->status = $request->status;
            $productRating->save();
            session()->flash('success', 'Product rating status change successfully');
            return response()->json([
                'status' => true,
                'message' => 'Product rating status change'
            ]);

        }

         web.php
        // Products Ratings.
        Route::get('ratings',[ProductController::class,'productRatings'])->name('products.productRatings');
        Route::get('change-rating-status',[ProductController::class,'changeRatingStatus'])->name('products.changeRatingStatus');


Part :- 59 Delete Garbage images backend. 
        Suppose we have add new product with images. But some time we don't create a product but upload the images and we move back to product listing page. But that time temp images are stored in my temp folder. So we delete that type of image after spacific time period.

        Admin > HomeController.php
        public function index(){
            // delete temp images here
            $dayBeforeToday = Carbon::now()->subDays(1)->format('Y-m-d H:i:s');
            $tempImages = TempImage::where('created_at','<=',$dayBeforeToday)->get();
            foreach($tempImages as $tempImage){
                $path = public_path('/temp/'.$tempImage->name);
                $thumbPath = public_path('/temp/thumb/'.$tempImage->name);
                // Delete main image
                if(File::exists($path)){
                    File::delete($path);
                }
                // Delete thumb image
                if(File::exists($thumbPath)){
                    File::delete($thumbPath);
                }
            
                TempImage::where('id', $tempImage->id)->delete();

            }
        }

Part :- 60 Update the invervation image library. We already using this updated libaray. We watching this video for only education purpose.
        TempImagesController.php
        public function create(Request $request){
            $manager = new ImageManager(new Driver());
            $image = $request->image;
            if(!empty($image)){
                $extension = $image->getClientOriginalExtension();
            
                $tempImage = new TempImage;
                $tempImage->name = 'TEST';
                $tempImage->save();
                $newName = $tempImage->id.'-'.time().'.'.$extension;
                $image->move(public_path().'/temp', $newName);
                $tempImage->name = $newName;
                $tempImage->save();

                // Generate Thumbnail
                $sourcePath = public_path().'/temp/'.$newName;
                $destPath = public_path().'/temp/thumb/'.$newName;
                $image = $manager->read($sourcePath);
                $image->scale(300, 275);
                $image->save($destPath);


                return response()->json([
                    'status' => true,
                    'image_id' => $tempImage->id,
                    'imagePath' => asset('/temp/thumb/'.$newName),
                    'message' => 'Image uploaded successfully'
                ]);
            }

        }


      

          

























